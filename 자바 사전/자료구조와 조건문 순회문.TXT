[열거형]
열거형은 단지 특별한 종류의 클래스일 뿐이다. 자바는 물밑에서 열거형을 abstract이고 
final인 java.lang.Enum 클래스의 하위클래스로 구현한다. 열거형은 직접 인스턴스화 하거나
확장이 불가능하다. 열겨형의 정의된 상수들을 사실 그 열거형의 인스턴스 들이다. 

각 열거형 상수는 안에서 선언된 위치를 나타내는 순서값을 가진다. 첫번째로 선언된 상수의
순서값은 0이다 ordinal()메서드를 통해 열거형 상수의 값을 구할수 있지만 순서 값에 의존하는
애플리케이션은 유지보수에 문제가 있을수 있기 때문에 권장하지 않느다.

toString()의 기본 구현과 name()메서드는 모두 열거형 상수의 문자열 표현을 반환한다.

[지능적인 상수설계하기]
열겨형도 완전한 자바 클래스라는 사실이라는 점을 활용하자. 다른 클래스와 열거형도 상태와 행위를 가질수 있다. 

[제네릭 타입 사용하기]
제네릭 타입을 매개변수화 할때 명시한 타입정보는 컴파일러가 소스코드를 바이트 코드로 컴파일 하면서 지워진다.
이것을 타입 이레이저 라고 한다. 제네릭 Collection타입에 대한 예로 List를 살펴보자 
public interface List<E> extends Collection<E>{
	
};
List(또는 어떤 Collection 타입이든)의 요소 타입을 명시하려면 객체를 선언하거나 인스턴스화 할떄
산형괄호 안에 타입 이름을 넣기만 하면된다. 이렇게 해서 매개변수화 된 타입을 명시하는 것이다.
다음 코드는 Integer의 List를 선언한다. 매개변수화된 타입 List<Integer>의 변수 aList를 선언하고
LinkedList<Integer>를 인스턴스화 하여 얻은 참조로 초기화한다. 

List<Integer> aList=new LinkedList<Integer>();


