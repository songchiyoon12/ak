
[스프링 프레임워크와 의존성 주입]

스프링 프레임워크의 핵심은 의존성주입이다. 
[스프링 프레임워크와 디스패처 서블릿]
웹 애플리케이션을 구현할 예정이므로 스프링의 주요한 기능을 알아보자
이 기능들은 spring-boot-starter-web라는 프로젝트에 존재하는데 3장에서
스프링 부트 프로젝트를 설정할떄 등장한다. 우리가 개발하는 자바 웹 애플리케이션은
대부분 자바 서블릿을 기반으로 한닫 http요청이 서버로 전달되면 웹 서버는 받은 요청을 
해석하여서 해당되는 서블릿 클래스를 실행한다.


public class Hello extends HttpServlet{
	@Override
	public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException ,IOException{
		
		
	}
}

스프링부트는 어노테이션과 서브 클래스를 적절히 이용해 개발자들이 반복 작업과 코드를
최소화할 수 있도록 도와준다. 스프링 부트는 디스패처서블릿 이라는 서블릿 클래스를 이미
구현하고 있다. 따라서 개발자가 서블릿 클래스를 작성하지 않아도 된다. 대신 개발자는
스프링 부트가 제공하는 어노테이션과 인터페이스를 이용행 스프링이 비즈니스 로직을 이해할수
있도록 내부 기능을 구현하면 된다.


  ----서버로직----
 스프링부트 디스패처서블릿ㅣ
비즈니스로직 클래스		  ㅣ
---- 서버로직-----

[@Component]
위 애너테이션을 달기만 한다고 무조건 스프링이 검색해서 등록해주지는 않는다.
@ComponentScan어노테이션이 있어야한다. 우리는 어느때 @Component를 사용하고 싶지 않을까?
또 어느떄 @Component를 사용하지 못할까? 

[빌드 자동화 Gradle과 라이브러리]
로드,패키징,테스팅 등을 자동화 할수있다 그렇다면 빌드 자동화는 왜 사용할까?
모든 자동화의 시작은 반복작업에서 시작된다. 프로젝트에서는 몇 백개 이상의 라이브러리를
기본으로 사용한다 오퍼레이터에게 이 작업을 반복적으로 요구하는 것은 인적 자원의 낭비다
그래서 이 작업을 자동화한다. 

[REST API]
REST는 Representational State Transfer의 약자로 아키텍처 스타일이다 아키텍처 스타일은
아키택처 패턴과는 조금 다른데 아키텍처 패턴은 어떤 반복되는 문제 상황을 해결하는 도구이고
아키텍처 스타일은 반복되는 아키텍처 디자인을 의미한다. REST아키텍처 스타일은 6가지 제약조건으로
구성된다.이 가이드 라인을 따르는 API를 RESTful APi라고 한다. 

제약조건
1.클라이언트-서버
2.상태가없는
3.캐시되는 데이터
4.일관적인 인터페이스
5.레이어 시스템
6.코드-온-디맨드

클라이언트-서버
클라리언트-서버 라는것은 리소스를 관리하는 서버가 존재하고 다수의 클라이언트가 리소스를
소비하려고 네트워크를 통해 서버에 접근하는 구조를 말한다. 이런 구조 중 우리에게 가장
친숙한것이 바로 웹 애플리케이션이고 우리가 만들 프로젝트이다
#리소스란 REST API가 리턴하는 모든것이다 HTML JSON 이미지 등이다

상태가없음 
상태가 없다는 것은 클라이언트가 서버에 요청을 보낼때 이전 요청의 영향을 받지 않음을 말한다.
예를들어 /login으로 로그인 요청을 보내고 로그인이 돼 다음 페이지인 /page로 넘어갔다고 
가정하자 /page로 리소로를 불러올떄 이전 요청에서 login한 사실을 서버가 알고 있어야 한다면
그것은 상태가 있는 아키텍처이다 서버가 그 사실을 알지 못한다면 상태가 없는 것이다.
그럼 로그인을 어떻게 해야할까? 클라이언트는 서버에 요청을 할떄마다 요청에 리소스를 받기위한
모든 정보를 포함해야한다. 
예를 들어 로그인의 경우 서버는 로그인 상태를 유지하지 못하므로 요청을
보낼떄 마다 로그인 정보를 항상 함께 보내야 한다.  리소스를 수정한후 수정한 상태를
유지해야 하는 경우에는 서버가 아닌 데이터베이스 같은 퍼시스턴스 상태를 저장해야한다.
HTTP는 기본적으로 상태가 없는 프로토콜이다. 따라서 HTTP를 사용하는 웹 애플리케이션은 기본적으로
상태가 없는 구조를 따른다.

캐시되는 데이터
서버에서 리소스를 리턴할떄 캐시가 가능하지 아닌지 명시해야한다 HTTP에서는 cache-control이라는 
헤더에 리소스의 캐시 여부를 명시할수가 있어야한다.

일관적인 인터페이스
시스템 또는 애플리케이션의 리소스에 접근할떄 인터페이스가 일관적이어야한다.

레이어 시스템
클라이언트가 서버에 요청을 할떄 여러개의 레이어로 된 서버를 거칠 수 있다.
예를 들어 서버가 인증서버 캐싱서버 로드 밸런서를 거쳐서 최종적으로 애플리케이션에
도착한다고 가정하자 이 사이의 레이어들은 요청과 응답에 어떤 영향을 미치지 않으며
클라이언트느 서버의 레이어 존재를 알지 못한다.

코드-온-디맨드(선택사항)
클라이언트는 서버에 코드를 요청할 수 있고 서버가 리턴한 코드를 실행할수있다.









			
















