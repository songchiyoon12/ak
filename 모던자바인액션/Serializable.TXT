[I/O]
관련 클래스들 
i/o의 기반은 Stream
자바 프로그램에서 데이터를 읽을 떄에는 InputStream을 사용한다.
밖으로 데이터를 쓸때에는 OutPutStream을 사용한다.
char기반의 데이터를 읽을 떄에는 Reader,Writer을 사용한다.

InputStream 과 Reader
주요 메소드
read()스트림의 내용일기
close()스트림 닫기

FileInputStream 바이트 기반의 파일을 읽을떄 사용 
ObjectInpuStream 저장되어 있는 객체를 읽을떄 사용
FilterInputStream 기타 여러 형태의 스트림을 처리하는 클래스의 부모가 되는 클래스




[NIO]
NIO가 생긴 이유는 단 하나다 속도 떄문이다. NIO는 지금까지 사용한 스트림을 사용하지 않고 대신 채널 Channel 버퍼 Buffer를 사용한다. 
채널은 물건을 중간에서 처리하는 도매상이며 버퍼는 도매상에서 물건을 사고 소비자에게 물건을 파는 소매상이다.

public class NioSample {
    public static void main(String[]args){
        NioSample sample=new NioSample();
        sample.basicWrideAndRead();
    }


    private void basicWrideAndRead() {
        String fileName="C:\\godofjava\\text\\nio.txt";
         try {
             writeFile(fileName, "나의 첫 nio");
             readFile(fileName);
         }catch (Exception e){
             e.printStackTrace();
         }
    }
    

    private void writeFile(String fileName, String data) throws Exception {
        FileChannel channel =new FileOutputStream(fileName).getChannel();
        //파일을 쓰기위한 FileChannel 객체를 얻으려면 FileOutputStream()에서 채널을 얻어와야한다.
        byte[] byteData=data.getBytes();
        ByteBuffer buffer=ByteBuffer.wrap(byteData);
        //wrap라는 메소드를 호출하면 ByteBuffer객체가 생성된다. 이 메소드의 매개변수는
        //저장할 byte의 배열을 넘겨주면된다. 
        channel.write(buffer);//파일에씀 
        channel.close();

    }

    private void readFile(String fileName) throws Exception{
        FileChannel channel=new FileInputStream(fileName).getChannel();
        ByteBuffer buffer=ByteBuffer.allocate(1024); //저장되는 크기지정 
        channel.read(buffer);
        buffer.flip();//buffer에 담겨있는 데이터의 가장 앞으로 이동한다.
        while (buffer.hasRemaining()){//한 바이트씩 읽는다.
            System.out.println((char)buffer.get()); 
        }
        channel.close();
    }
}

[NIO의 Buffer클래스]
ByteBuffer을 살펴봤지만 Char Double Float Int Long Short 등 다양하다. 이러한 Buffer클래스에 
선언되어 있는 메소드는 flip()만 있는것이 아니다 먼저 버퍼의 상태 및 속성을 확인하기 위한 메소드를 살펴보자.


capacity() 버퍼에 담을수 있는 크기 리턴
limit() 버퍼에서 읽거나 쓸수 없는 첫 위치 리턴
position() 현재 버퍼의 위치 리턴

0<=position <=limit<=capacity



