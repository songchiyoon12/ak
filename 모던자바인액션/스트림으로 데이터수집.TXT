[스트림으로 데이터수집]
자바 8의 스트림은 데이터 집합을 멋지게 처리하는 게으른 반복자이다 스트림의 연산은
filter또는 map같은 중간 연산과 count,findFirst,forEach,reduce등의 최종연산이 있다.
중간 연산은 한 스트림을 다른 스트림으로 변환하는 연산으로써 여러 연산을 연결할수
있다. 이장에서는 reduce가 그럤던거 처럼 collect역시 다양한 요소 누적 방식을
인수로 받아서 스트림을 최종 결과로 도출하는 리듀싱 연산을 수행할 수 있음을
설명한다. 다양한 요소 누적 방식은 Collector인터페이스에 정의되어있다. 
->collect를 효과적으로 사용해보자!

[컬렉터란?]
이전 예제에서는 collect메서드로 Collector인터페이스 구현을 전달했다 Collector
인터페이스 구현은 스트림의 어떤 요소를 어떤 식으로 도출할지 지정한다.5장에서는
'각 요소를 '리스트로 만들어라는 의미를 가진 toList를 Collector인터페이스의 구현으로 사용했다. 


[미리 정의된 컬렉터]
Collectors에서 제공하는 메서드의 기능은 크게 세가지로 구분이 가능하다.
1.스트림 요소를 하나의 값으로 리듀스하고 요약
2.요소 그룹화
3.요소 분할

[리듀싱과 요약]
이미 배웠듯이 컬렉터로 스트림의 항목을 컬렉션으로 재구성할수 있다.
좀 더 일반적으로 말해 컬렉터로 스트림의 모든 항목을 하나의 결과로 합칠수가 있다.
첫 번쨰 예제로 counting()라는 팩토리 메서드가 반환되는 컬렉터로 메뉴에서 요리 수를 계산한다.

long howManyDishes=menu.stream().collect(Collectors.counting());
다음처럼 불필요한 과정을 피할수가 있다.
long howManyDishes1=menu.stream().count();

[스트림 값에서 최댓값과 최솟값 검색]
메뉴에서 칼로리가 가장 높은 요리를 찾는다고 가정하자 Collectors.maxBy,Collectors.minBy
두개의 메서드를 이용해서 스트림의 최댓값과 최솟값을 계산할수 있다. 
두 컬렉터는 스트림의 요소를 비교하는데 사용할 Comparator를 인수로 받는다.
Comparator를 구현한 다음에 Collectors.maxBy로 전달한다.

Comparator<Dish> dishCaloriesComparator=Comparator.comparingInt(Dish::getCalories);
        System.out.println(dishCaloriesComparator);
        
Optional<Dish> most=menu.stream().collect(maxBy(dishCaloriesComparator));
        System.out.println(most);

이러한 연산을 요약이라고 한다.

[범용 리듀싱 요약 연산]

지금 까지 모든 컬렉터는 reducing팩토리 메소드로도 정의할수 있다. 즉 범용
Collectors.reducing으로도 구현이 가능하다. 예를 들어 다음 코드처럼 reducing 메서드로
만들어진 컬렉터로도 메뉴의 모든 칼로리 합계를 구할수 있다. reducing은 인수 3개를 받는다.

int totalCalories=menu.stream().collect(reducing(0,Dish::getCalories),(a,b)->a+b);
1.초깃값 2.변환함수 3.BinaryOperator

다음처럼 한 개의 인수를 가진 reducing버전을 이용해서 가장 칼로리가 높은 요리를 찾는 방법도 있다.
Optional<Dish> mostCalorieDish=menu.stream().collect(reducing((d1,d2)->d1.getCalories()>d2.getCalories()?d1:d2));
한개의 인수를 갖는 reducing팩토리 메서드는 세 개의 인수를 갖는 reducing메서드에서 스트림의
첫번쨰 요소를 시작요소,즉 첫 번쨰 인수로 받으며 자신을 그대로 반환하는 항등함수를 두번쨰 인수로 받는 상황에
해당한다. 한개의 인수를 갖는 reducing함수는 리턴값으로 Optional를 반환한다.

[그룹화]
팩토리 메서드 Collectors.groupingBy()를 이용해서 쉽게 메뉴를 그룹화가 가능하다.

Map<Dish.Type,List<Dish>> dishesByType=menu.stream().collect(groupingBy(Dish::getType));
{FISH=[prawns, salmon], MEAT=[pork, beef, chicken], OTHER=[french, rice, season fruit, pizza]}

스트림의 각 요리에서 Dish.Type과 일치하는 모든 요리를 추출하는 groupingBy()메서드로 전달했다.
이 함수를 기준으로 스트림이 그룹화되므로 이를 분류 함수라고 한다. 그룹화 예제에서
키는 요리 종류고,값은 해당 종류에 포함되는 요리이다.

그룹화된 항목을 조작하는 다른 유용한 기능중 또 다른 하난로 맵핑 함수를 이용해 요소를
변환하는 작업이 있다. filtering컬렉터와 같은 이유로 Collectors클래스는 매핑함수와 각
항목에 적용한 함수를 모으는데 사용하는 또 다른 컬렉터를 인수로 받는 mapping메서드를
제공한다. 예를 들어 이 함수를 이용해 그룹의 각 요리를 관련 이름 목록으로 받을수가 있다.


























