[병렬처리]
자바 7이 등장하기 이전에는 데이터 컬렉션을 병렬로 처리하기가 어려웠다.
우선 데이터를 서브파트로 분할해야한다. 그리고 분할된 서브파트를 각각의
스레드로 할당한다. 스레드로 할당한 다음에는 의도치 않은 경쟁상태가 되지않도록
적절한 동기화를 추가해야하며 마지막으로 부분 결과를 합쳐야한다. 자바는 에러를
최소화 하도록 하기위해서 포크/조인 프레임워크를 제공한다 여기서는 스트림으로
데이터 컬렉션 관련 동작을 얼마나 쉽게 병렬로 실행할수 있는지 설명한다.

병렬스트림이 내부적으로 어떻게 처리되는지 알아야 스트림을 잘못 사용하는
상황을 피할수있다. 우선 여러 청크를 병렬로 처리하기 전에 병렬 스트림이 여러 
청크로 분할하는 방법을 설명할 것이다. 이 원리를 이해 해야한다.

[병렬 스트림]
컬렉션에 parallelStream을 호출하면 병렬 스트림이 생성된다. 병렬 스트림이란
각각의 스레드에서 처리 할수 있도록 스트림 요소를 여러 청크로 분할한 스트림이다.
따라서 병렬 스트림을 이용하면 모든 멀티코어 프로세서가 각각의 청크를 처리하도록
할당할수가 있다. 숫자 n을 인수로받아서 1부터 n까지 반환하는 함수를 설계 해보자
public long sqe(long n){
        return Stream.iterate(1L,i->i+1).limit(n).reduce(0L,Long::sum);
    }
    
    
    
[순차 스트림을 병렬로 변환하기]

순차 스트림에 parallel메서드를 호출하면 기존의 함수형 리듀싱 연산이
병렬로 처리가 된다.

public long sqe(long n){
	return Stream.iterate(1L,i->i+1)
	.limit().parallel().reduce(0L,Long::sum);
}

[스트림 성능 측정]
JMH를 이용하면 간단하고 어노테이션 기반 방식을 지원하며 안정적으로 자바 
프로그램이나 자바 가상 머신을 대상으로 하는 다른 언어용 벤치 마크를 구현이
가능하다 사실 JVM으로 실행되는 프로그램을 벤치마크 하는 작업은 쉽지않다.



























