[서블릿 예외처리 시작]
스프링이 아닌 순수 서블릿 컨테이너는 예외를 어떻게 처리하는지 알아보자.

2가지  방식이있다.
Exception(예외)
response.sendError(HTTP상태코드,오류메시지)

Exception(예외)
웹애플리케션은 사용자 요청별로 별도의 쓰레드가 할당이 되고 서블릿 컨테이너 안에서
실행된다. 애플리케이션에서 예외가 발생하는데 어디선가 try~ catch로 예외를 잡아서
처리하면 아무런 문제가 없다. 그런데 만약에 애플리케이션에서 예외를 잡지 못하고
서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?

WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
결국 톰캣같은 was까지 예외가 전달이 된다. was는 예외를 어떻게 처리할까?

먼저 스프링 부트가 제공하는 기본 예외 페이지가 있는데 이건 꺼두자
application.properties

server.error.whitelabel.enabled=false

@GetMapping("/error-ex")
 public void errorEx() {
 throw new RuntimeException("예외 발생!");
 }
 
실행해보면 다음처럼 tomcat이 기본으로 제공하는 오류 화면을 볼 수 있다.
HTTP Status 500 – Internal Server Error
Exception의 경우 서버 내부에서 처리할 수 없는 오류가 발생한것으로 생각해서
HTTP상태 코드 500을 반환한다. 

 
이번에는 아무사이트나 호출해보자.
http://localhost:8080/no-page
HTTP Status 404 – Not Found
톰캣이 기본으로 제공하는 404오류화면을 볼수가 있다.

HTTP 400 에러 : 서버가 요청의 구문을 인식하지 못했다는 뜻으로 문법상 오류가있다
HTTP 403 에러 : 서버가 요청을 거부하고 있다는 뜻으로 접근이 금지
HTTP 404 에러 : 서버가 요청한 페이지를 찾을 수 없다는 뜻입니다.
HTTP 500 에러 : 서버에 오류가 발생하여 요청을 수행할 수 없다는 것입니다.
 
response.sendError()->오류가 생겼다는것을 전달 
오류가 발생하면 HttpServletResponse가 제공하는 sendError()라는 메서드를 사용
하면 된다. 이것을 호출한다고 당장 예외가 발생하는것은 아니지만 서블릿 컨테이너
에게 오류가 발생했다는 점을 전달할수가 있다. 이 메서드를 사용하면 http상태
코드와 오류 메시지도 추가가 가능하다.

response.sendError(HTTP 상태 코드)
response.sendError(HTTP 상태 코드, 오류 메시지)
 
 @GetMapping("/error-404")
public void error404(HttpServletResponse response) throws IOException {
 response.sendError(404, "404 오류!");
}
@GetMapping("/error-500")
public void error500(HttpServletResponse response) throws IOException {
 response.sendError(500);
}
 
response.sendError() 를 호출하면 response 내부에는 오류가 발생했다는 
상태를 저장해둔다.그리고 서블릿 컨테이너는 고객에게 응답 전에 response 
에 sendError() 가 호출되었는지 확인한다. 리고 호출되었다면 설정한 오류 코드에
맞추어 기본 오류 페이지를 보여준다
 
 
 
[서블릿 예외처리 -오류화면 제공]

서블릿은 예외가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError()가
호출되었을떄 각각의 상황에 맞춘 오류처리 기능을 제공한다.

스프링 부트가 제공하는 기능을 사용해서 서블릿 오류페이지를 등록하면 된다.


 @Component
public class WebServerCustomizer implements
WebServerFactoryCustomizer<ConfigurableWebServerFactory> {
 @Override
 public void customize(ConfigurableWebServerFactory factory) {
 	
 ErrorPage errorPage404 = new ErrorPage(HttpStatus.NOT_FOUND, "/errorpage/404");
 ErrorPage errorPage500 = new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/error-page/500");
 ErrorPage errorPageEx = new ErrorPage(RuntimeException.class, "/errorpage/500");
 
 factory.addErrorPages(errorPage404, errorPage500, errorPageEx);
 }
}
 
[서블릿 예외처리- 오류페이지 작동원리]
서블릿은 예외가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError()가
호출 되었을때 설정된 오류 페이지를 찾는다.

 
예외 발생 흐름
WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
sendError 흐름
WAS(sendError 호출 기록 확인) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러
(response.sendError())

WAS는 해당 예외를 처리하는 오류 페이지 정보를 확인한다.
new ErrorPage(RuntimeException.class, "/error-page/500")

예를 들어서 RuntimeException 예외가 WAS까지 전달되면, WAS는 오류 페이지 
정보를 확인한다. 확인해보니 RuntimeException 의 오류 페이지로 /error-page/500
이 지정되어 있다. WAS는 오류 페이지를 출력하기 위해 /error-page/500 를 
다시 요청한다

 
오류 페이지 요청 흐름
WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500) -> View

예외 발생과 오류 페이지 요청 흐름
1. WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
2. WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러
(/errorpage/500) -> View

중요한 점은 웹 브라우저는 서버 내부에서 이런일이 일어나는지 전혀 모른다는 
점이다 오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출을 한다.

정리를 하자면
1.예외가 발생해서 was까지 전파
2.was는 오류 페이지 경로를 찾아서 내부에서 오류 페이지를 호출한다. 

오류정보 추가
was는 오류 페이지를 단순히 다시 요청만 하는것이 아니라 오류 정보를 request의
arrtibute에 추가해서 넘겨준다 오류페이지에서 정보를 사용이 가능하다.
 
[서블릿 예외 처리-필터]
오류가 발생하면 오류 페이지를 출력하기 위해 was내부에서 다시 한번 호출이
발생한다. 이떄 필터 서블릿,인터셉터 모두 다시 호출된다. 그런데 로그인 인증
체크 같은 경우를 생각해보면 이미 한번 필너타 인터셉터에서 로그인 체크를
완료했다 따라서 서버 내부에서 오류 페이지를 호풀한다고 해서 해당 필터나
인터셉터가 한 번더 호출되는 것은 매우 비효율적이다.

결국 클라이언트로 부터 발생한 정상 요청인지 아니면 오류 페이지를 출력하기
위한 내부 요청인지 구분할 필요가 있다. 이러한 문제해결을 위해서 스프링은
DispatcherType라는 추가 정보를 제공한다.

DispatcherType
log.info("dispatchType={}",request.getDispatcherType());

출력해보면 dispatchType=ERROR로 나오는 것을 확인이 가능하다.


 public enum DispatcherType {
 FORWARD,
 INCLUDE,
 REQUEST,
 ASYNC,
 ERROR
}
 
DispatcherType
REQUEST:클라이언트에 요청
ERROR:오류요청
FORWARD:MVC에서 배웠던 서블릿이나 다른 서블릿이 JSP를 호출할떄
RequestDispatcher.forward(request, response);
ASYNC:서블릿 비동기 호출

[필터와 DispatcherType]

필터와 DispatcherType이 어떻게 사용되는지 알아보자.

@Slf4j
public class LogFilter implements Filter {
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		log.info("log filter init");
	
	@Override
	public void doFilter(ServletRequest request,ServletResponse response,
	FilterChain chain)throws IOException, ServletException{
		HttpServletRequest httpRequest=(HttpServletRequest)request;
		String requestURI=httpRequest.getRequestURI();
		String uuid=UUID.randomUUID().toString();
		
		try {
			log.info("REQUEST [{}][{}][{}]", uuid,
			request.getDispatcherType(), requestURI);
			chain.doFilter(request, response);
			} catch (Exception e) {
				throw e;
			} finally {
				log.info("RESPONSE [{}][{}][{}]", uuid,
				request.getDispatcherType(), requestURI);
			}
			}
 @Override
 public void destroy() {
 log.info("log filter destroy");
 }
		
	}

@Configuration
public class WebConfig implements WebMvcConfigurer {
 @Bean
 public FilterRegistrationBean logFilter() {
 FilterRegistrationBean<Filter> filterRegistrationBean = new
FilterRegistrationBean<>();
 filterRegistrationBean.setFilter(new LogFilter());
 filterRegistrationBean.setOrder(1);
 filterRegistrationBean.addUrlPatterns("/*");
 filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST	DispatcherType.ERROR);
 return filterRegistrationBean;
 }
}

[서블릿 예외처리 -인터셉터]

@Slf4j
public class LogInterceptor implements HandlerInterceptor {
 public static final String LOG_ID = "logId";
 
@Override
 public boolean preHandle(HttpServletRequest request, HttpServletResponse
response, Object handler) throws Exception {
	
	String requestURI=request.getRequestURI();
	String uuid=UUID.randomUUID().toString();
	request.setAttribute(LOG_ID,uuid);
	
	log.info("REQUEST [{}][{}][{}][{}]", uuid, request.getDispatcherType(), 			requestURI, handler);
			return true;
 }
 @Override
 public void postHandle(HttpServletRequest request, HttpServletResponse
response, Object handler, ModelAndView modelAndView) throws Exception {
 log.info("postHandle [{}]", modelAndView);
 }
 
  @Override
 public void afterCompletion(HttpServletRequest request, HttpServletResponse
response, Object handler, Exception ex) throws Exception {
 String requestURI = request.getRequestURI();
 String logId = (String)request.getAttribute(LOG_ID);
 log.info("RESPONSE [{}][{}][{}]", logId, request.getDispatcherType(),
requestURI);
 if (ex != null) {
 log.error("afterCompletion error!!", ex);
 }
 }
앞서 필터의 경우에는 필터를 등록할떄 DispatcherType인 경우에 필터를 적용할지
안할지 선택이 가능했다 그런데 인터셉터는 서블릿이 제공하는 기능이 아니라
스프리잉 제공하는 기능이다 따라서 DispatcherType과 무관하게 항상호출된다.

대신에 인터셉터는 다음과 같이 요청 경로에 따라서 추가하거나 제외하기 쉽게 되어있기 때문에, 이러한 설정을 사용해서 오류 페이지 경로를 excludePathPatterns
를 사용해서 빼주면 된다.

@Override
 public void addInterceptors(InterceptorRegistry registry) {
 registry.addInterceptor(new LogInterceptor())
 .order(1)
 .addPathPatterns("/**")
 .excludePathPatterns(
 "/css/**", "/*.ico"
 , "/error", "/error-page/**" //오류 페이지 경로
 );
 }
}
 
 전체흐름 정리
 /hello 정상 요청
WAS(/hello, dispatchType=REQUEST) -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러 -> View
[스프링 오류페이지]
지금까지 예외처리 페이지를 만들기 위해서 다음과 같은 복잡한 과정을 거쳤다.
1.WebServerCustomizer만들고
2.예외 종류에따라서 ErrorPage를 추가하고
3.예외 처리용 컨트롤러 ErrorPageController만듬

스프링부트는 
ErrorPage를 자동으로 등록한다. 이떄 /error라는 경로로 오류 페이지를 설정한다.
new ErrorPage("/error")상태코드와 예외를 설정하지 않으면 오류 페이지로 사용됨
BasicErrorController 라는 스프링 컨트롤러를 자동으로 등록한다.

개발자는 오류 페이지만 등록
BasicErrorController 는 기본적인 로직이 모두 개발되어있다. 개발자는
오류 페이지 화면만 BasicErrorController가 제공하는 룰과 우선순위에 따라서
등록만 하면 된다 정적 HTML이면 정적 리소스 뷰 템플릿을 사용해서 동적으로
오류 화면을 만들고 싶으면 뷰 템플릿 경로에 오류 페이지 파일을 만들면 된다.


 뷰 선택 우선순위
BasicErrorController 의 처리 순서
1. 뷰 템플릿
resources/templates/error/500.html
resources/templates/error/5xx.html
2. 정적 리소스( static , public )
resources/static/error/400.html
resources/static/error/404.html
resources/static/error/4xx.html
3. 적용 대상이 없을 때 뷰 이름( error )
resources/templates/error.html
 
 해당 경로 위치에 http상태 코드 이름의 뷰 파일을 넣어두면 된다.
 
 
 