
[컴포넌트 스캔]
스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는
기능을 제공한다. 또 의존관계도 자동으로 주입하는 @Autowired라는 기능도 제공한다.

@Configuration
@ComponentScan
(excludeFilters=@Filter(type=FilterType.ANNOTATION, classes=Configuration.class))

public class AutoAppConfig {
}

컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
컴포넌트 스캔을 사용하면 @Configuration이 붙은 설정 정보도 자동으로 등록되기
떄문에 AppConfig TestConfig등 앞서 만들어두었던 설정 정보도 함꼐 등록되어버린다.
그래서excludeFilters를 이용해서 제외하였다 

[탐색위치와 기본 스캔대상]
모든 자바 클래스를 다 컴포넌트 스캔하면 시간이 오래 걸린다. 그래서 꼭 필요한
위치부터 탐색하도록 시작위치를 지정할수가 있다.

@ComponentScan(basePackages="hello.core")

예를 들어서 프로젝트가 다음과 같이 구조가 되어 있으면
com.hello
com.hello.serivce
com.hello.repository
com.hello 프로젝트 시작 루트, 여기에 AppConfig 같은 메인 설정 정보를 두고,
@ComponentScan 애노테이션을 붙이고, basePackages 지정은 생략한다


[컴포넌트 스캔 기본대상]

컴포넌트 스캔은 @Component 뿐만 아니라 다음과 내용도 추가로 대상에 포함한다.
@Component : 컴포넌트 스캔에서 사용
@Controlller : 스프링 MVC 컨트롤러에서 사용
@Service : 스프링 비즈니스 로직에서 사용
@Repository : 스프링 데이터 접근 계층에서 사용
@Configuration : 스프링 설정 정보에서 사용


[필터]
includeFilters:컴포넌트 스캔 대상을 추가로 지정한다.
excludeFilters:컴포넌트 스캔에서 제외할 대상을 지정한다.

[중복 등록과 충돌]
이 경우 수동 빈 등록이 우선권을 가진다.

[다양한 의존관계 주입 방법]

의존관계 주입은 크게 4가지 방법이 있다.
생성자 주입 ,수정자 주입, setter 주입, 필드 주입, 일반 메서드 주입

생성자 주입
이름 그대로 생성자를 통해서 의존 관계를 주입 받는 방법이다. 지금까지 우리가
진행했던 방법이 바로 생성자 주입이다.

@Component
public class OrderServiceImpl implements OrderService {
 private final MemberRepository memberRepository;
 private final DiscountPolicy discountPolicy;
 @Autowired
 public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy
discountPolicy) {
 this.memberRepository = memberRepository;
 this.discountPolicy = discountPolicy;
 }
}

중요! 생성자가 딱 1개만 있으면 @Autowired를 생략해도 자동 주입 된다. 물론 스프링 빈에만 해당한다


수정자 주입(setter 주입)
setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해서 의존관계를 
주입하는 방법이다.

특징
선택, 변경 가능성이 있는 의존관계에 사용
자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법이다.

@Component
public class OrderServiceImpl implements OrderService {
 private MemberRepository memberRepository;
 private DiscountPolicy discountPolicy;
 
 @Autowired
 public void setMemberRepository(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
 }
 
 @Autowired
 public void setDiscountPolicy(DiscountPolicy discountPolicy) {
 this.discountPolicy = discountPolicy;
 }
 
}

[옵션처리]
주입할 스프링 빈이 없어도 동작해야 할떄가 있다 그런데 @Autowired만 사용하면
required옵션의 기본값이 true로 되어 있어서 자동 주입 대상이 없으면 오류가
발생한다. 

자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.

@Autowired(required=false)
자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨

//호출 안됨
@Autowired(required = false)
public void setNoBean1(Member member) {
 System.out.println("setNoBean1 = " + member);
}



org.springframework.lang.@Nullable 
자동 주입할 대상이 없으면 null이 입력된다.
 
 @Autowired
public void setNoBean2(@Nullable Member member) {
 System.out.println("setNoBean2 = " + member);
}
 
 
Optional<> 
자동 주입할 대상이 없으면 Optional.empty 가 입력된다

@Autowired(required = false)
public void setNoBean3(Optional<Member> member) {
 System.out.println("setNoBean3 = " + member);
}

출력결과
setNoBean2 = null
setNoBean3 = Optional.empty

[빈 생명주기 콜백]
데이터베이스 커넥션 풀이나 네트워크 소켓처럼 애플리케이션 종료시점에 연결을
모두 종료하는 작업을 진행하여면 객체의 초기화와 종료 작업이 필요하다

connect()를 호출해서 연결을 맺어두어야하고,애플리케이션이 종료되면
disConnect()를 호출해서 연결을 끊어야한다.
public class NetworkClient {
 private String url;
 
	public NetworkClient() {
	System.out.println("생성자 호출, url = " + url);
	connect();
	call("초기화 연결 메시지");
	}
	
 public void setUrl(String url) {
 this.url = url;
 }
 //서비스 시작시 호출
 public void connect() {
 System.out.println("connect: " + url);
 }
 public void call(String message) {
 System.out.println("call: " + url + " message = " + message);
 }
 //서비스 종료시 호출
 public void disconnect() {
 System.out.println("close: " + url);
 }
}

@Bean
 public NetworkClient networkClient() {
 NetworkClient networkClient = new NetworkClient();
 networkClient.setUrl("http://hello-spring.dev");
 return networkClient;
 }


생성자 호출, url = null
connect: null
call: null message = 초기화 연결 메시지

생성자 부분을 보면 url정보 없이 connect가 호출되는 것을 확인할수가 있다.
너무 당연한 이야기 이지만 객체를 생성하는 단계에는 url이 없고 객체를 생성한
다음에 외부에서 수정자 주입을 통해서 setUrl()이 호출되어야 한다. url이 
존재하게된다. 

스프링 빈은 간단하게 다음과 같은 라이프 사이클을 가진다.
스프링 빈은 객체를 생성하고 의존관계 주입이 다 끝난 다음에야 필요한 데이터를
사용할수 있는 준비가 완료된다. 따라서 초기화 작업은 의존관계 주입이 모두 완료
되고 난 다음에 호출해야 한다. 

스프링 빈의 이벤트 라이프사이클
스프링 컨테이너 생성 ->스프링 빈 생성-> 의존관계 주입 ->초기화 콜백 사용-> 
소멸전 콜백 ->스프링 종료

초기화 콜백:빈이 생성되고 빈의 의존관계 주입이 완료된 후 호출
소멸전 콜백:빈이 소멸되기 직전에 호출 

[애노테이션 @PostConstruct @PreDestroy]

public class NetworkClient {
 private String url;
 
 public NetworkClient() {
 System.out.println("생성자 호출, url = " + url);
 }
 
 public void setUrl(String url) {
 this.url = url;
 }
 
 //서비스 시작시 호출
 public void connect() {
 System.out.println("connect: " + url);
 }
 
 public void call(String message) {
 System.out.println("call: " + url + " message = " + message);
 }
 
 //서비스 종료시 호출
 public void disConnect() {
 System.out.println("close + " + url);
 }
 
 @PostConstruct
 public void init() {
 System.out.println("NetworkClient.init");
 connect();
 call("초기화 연결 메시지");
 }
 
 @PreDestroy
 public void close() {
 System.out.println("NetworkClient.close");
 disConnect();
 }
}

@Bean
 public NetworkClient networkClient() {
 NetworkClient networkClient = new NetworkClient();
 networkClient.setUrl("http://hello-spring.dev");
 return networkClient;
 }
 
 생성자 호출, url = null
NetworkClient.init
connect: http://hello-spring.dev
call: http://hello-spring.dev message = 초기화 연결 메시지
19:40:50.269 [main] DEBUG
org.springframework.context.annotation.AnnotationConfigApplicationContext -
Closing NetworkClient.close
close + http://hello-spring.dev
 




 
