[IOC DI 그리고 컨테이너]

제어의 역전ioc
기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고
연결하고 실행했다. 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.
개발자 입장에서는 자연스러운 흐름이다 반면에 AppConfig가 등장한 이후에 구현
객체는 자신의 로직을 실행하는 역활만 담당한다 프로그램의 제어 흐름은 이제
AppConfig가 가져간다 예를 들어서 서 OrderServiceImpl 은 필요한 인터페이스들을
호출하지만 어떤 구현 객체들이 실행될지 모른다 프로그램에 대한 제어 흐름에 대한
모든 권한은 AppConfig가 가지고 있다. 심지어 OrderServiceImpl 도 AppConfig가
생성한다 그리고 AppConfig는 OrderServiceImpl이 아닌 OrderService인터페이스의
다른 구현 객체를 생성하고 실행이 가능하다 이럿듯 프로그램의 제어 흐름을 직접
제어하는것이 아닌 외부에서 관리하는것을 제어의 역전이라고 한다.

[의존관계 주입DI]
OrderServiceImpl은 DiscountPolicy인터페이스에 의존한다 실제 어떤 구현 객체가
사용될지는 모른다 의존관계는 정적인 클래스 의존관계와,실행시점에 결정되는
동적인 객체 의존관계들을 분리해서 생각해야 한다. 

public class OrderServiceImpl implements OrderService {
 private final MemberRepository memberRepository;
 private final DiscountPolicy discountPolicy;
 public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy
discountPolicy) {
 this.memberRepository = memberRepository;
 this.discountPolicy = discountPolicy;
 }
 }
 
 
OrderServiceImpl 은 MemberRepository , DiscountPolicy 에 의존한다는 것을 
알 수 있다.그런데 이러한 클래스 의존관계 만으로는 실제 어떤 객체가 OrderServiceImpl 에 주입 될지 알 수 없다.


IoC 컨테이너, DI 컨테이너
AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을
IoC 컨테이너 또는 DI 컨테이너라 한다.
의존관계 주입에 초점을 맞추어 최근에는 주로 DI 컨테이너라 한다.
또는 어샘블러, 오브젝트 팩토리 등으로 불리기도 한다

[스프링전환]

 
 
 @Configuration
public class AppConfig {
 @Bean
 public MemberService memberService() {
 return new MemberServiceImpl(memberRepository());
 }
 @Bean
 public OrderService orderService() {
 return new OrderServiceImpl(
 memberRepository(),
 discountPolicy());
 }
 @Bean
 public MemberRepository memberRepository() {
 return new MemoryMemberRepository();
 }
 @Bean
 public DiscountPolicy discountPolicy() {
 return new RateDiscountPolicy();
 }
}

AppConfig설정을 구성한다는 뜻의 @Configuration을 붙여준다.
각 메서드에 @Bean을 붙여준다 이렇게 하면 스프링 컨테이너에 스프링 빈으로 등록

 
ApplicationContext applicationContext = newAnnotationConfigApplicationContext(AppConfig.class);
MemberService memberService = applicationContext.getBean("memberService", MemberService.class)
 
 
[스프링 컨테이너 ]

ApplicationContext를 스프링 컨테이너라고 한다.
기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 Di를 했지만
이제부터는 스프링 컨테이너를 통해서 사용한다. 

스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정 정보로 사용한다
여기서 @Bean이라 적힌 메서드 들을 모두 호출해서 반환된 객체를 
스프링 컨테이너에 등록한다 이렇게 스프링 컨테이너에 등록된 객체를 
스프링 빈이라고 한다. 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 
이름으로 사용한다.(memberService,orderService)이전에는 개발자가 필요한 객체를
AppConfig를 사용해서 직접 조회했지만 이제부터는 스프링 컨테이너를 통해서
필요한 스프링 빈을 찾아야한다 스프링 빈은 applicationContext.getBean()을 
통해서 찾을수있다. 어떤 장점이 있을까?


[스프링 컨테이너와 스프링 빈]
 
스프링 컨테이너 생성

스프링 빈 저장소

빈이름           빈객체
memberService 	MemberRepository@x01
orderService 	OrderServiceImpl@x02
 
빈 이름은 메서드 이름을 사용한다.
빈 이름을 직접 부여할 수 도 있다.@Bean(name="memberService2")

주의: 빈 이름은 항상 다른 이름을 부여해야 한다. 같은 이름을 부여하면, 
다른 빈이 무시되거나, 기존 빈을 덮어버리거나 설정에 따라 오류가 발생한다.


[싱글톤 컨테이너]

웹 애플리케이션과 싱글톤
스프링은 태생이 기업용 온라인 서비스 기술을 지원하기 위해 탄생했다.
대부분의 스프링 애플리케이션은 웹 애플리케이션이다. 물론 웹이 아닌 
애플리케이션 개발도 얼마든지 개발할 수 있다. 웹 애플리케이션은 보통 여러 
고객이 동시에 요청을 한다.
 
 public class SingletonTest {
 @Test
 @DisplayName("스프링 없는 순수한 DI 컨테이너")
 void pureContainer() {
 AppConfig appConfig = new AppConfig();
 //1. 조회: 호출할 때 마다 객체를 생성
 MemberService memberService1 = appConfig.memberService();
 //2. 조회: 호출할 때 마다 객체를 생성
 MemberService memberService2 = appConfig.memberService();
 //참조값이 다른 것을 확인
 System.out.println("memberService1 = " + memberService1);
 System.out.println("memberService2 = " + memberService2);
 //memberService1 != memberService2
 assertThat(memberService1).isNotSameAs(memberService2);
 }
}

우리가 만들었던 스프링 없는 순수한 di컨테이너인 AppConfig는 요청을 할떄마다
새로운 객체를 새로생성한다. 고객 트래픽이 초당100이 나오면 초당 100개 객체가
생성되고 소멸이된다->메모리 낭비가 심하다.
해결방안은 해당 객체가 딱 1개만 생성되고 , 공유하도록 설계한다->싱글톤 패턴


[싱글톤 패턴]
클래스의 인스턴스가 딱1개만 생성되는 것을 보장하는 디자인 패턴이다.
그래서 객체 인스턴스인 2개 이상 생성하지 못하도록 막아아 한다.





public class SingletonService {
	
 //1. static 영역에 객체를 딱 1개만 생성해둔다.
 private static final SingletonService instance = new SingletonService();
 
 //2. public으로 열어서 객체 인스터스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한다.
 
 public static SingletonService getInstance() {
 return instance;
 }
 
 //3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
 
 private SingletonService() {
 }
 
 public void logic() {
 System.out.println("싱글톤 객체 로직 호출");
 }
}
싱글톤 패턴 문제점
1.구현하는 코드 자체가 많이 들어간다.
2.의존 관계상 클라이언트가 구체 클래스에 의존한다.
3.테스트 하기 어렵다
4.유연성이 떨어진다.
5.안티패턴으로도 불린다.


[싱글톤 컨테이너]
스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서 객체 인스턴스를 싱글톤으로
관리한다 지금까지 우리가 학습한 스프링 빈이 바로 싱글톤으로 관리되는 빈이다.

스프링 컨테이너는 싱글톤 패턴을 적용하지 않아도 객체 인스턴스를 싱글톤으로관리
스프링 컨테이너는 싱글톤 컨테이너 역활을 한다 이렇게 싱글톤 객체를 생성하고
관리하는 기능을 싱글톤 레지스트리라고 한다. 
스프링 컨테이너의 이런 기능 덕분에 싱글톤 패턴의 모든 단점을 해결하면서
객체를 싱글톤으로 유지가 가능하다.

스프링 컨테이너 덕분에 고객의 요청이 올 때 마다 객체를 생성하는 것이 아니라이미 만들어진 객체를공유해서 효율적으로 재사용할 수 있다

[싱글톤 방식의 주의점 ]

싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든, 객체 인스턴스를 하나만 생성해서 공유하는싱글톤 방식은 여러 클라이언트가 하나의 같은 객체
인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계하면안된다. 무상태(stateless)로 설계해야 한다

public class StatefulService {
 private int price; //상태를 유지하는 필드
 
 public void order(String name, int price) {
 	System.out.println("name = " + name + " price = " + price);
	this.price = price; //여기가 문제!
 }
 public int getPrice() {
	return price;
 }
}



[@Configuration과 싱글톤]
스프링 컨테이너는 싱글톤 레지스트리다. 따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 한다. 그런데스프링이 자바 코드까지 어떻게 하기는 어렵다. 저 자바 코드를 보면 분명 3번 호출되어야 하는 것이 맞다.그래서 스프링은 클래스의 바이트코드를 조작하는 라이브러리를 사용한다.모든 비밀은 @Configuration 을 적용한 AppConfig 에 있다





@Test
void configurationDeep() { 
ApplicationContext ac = newAnnotationConfigApplicationContext(AppConfig.class);

 //AppConfig도 스프링 빈으로 등록된다.
 AppConfig bean = ac.getBean(AppConfig.class);

 System.out.println("bean = " + bean.getClass());
 //출력: bean = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70
}

사실 AnnotationConfigApplicationContext에 파라미터로 넘긴 값은 스프링 빈으로등록된다. 그래서 AppConfig도 스프링 빈이 된다 AppConfig도 스프링 빈을 조회해서
클래스 정보를 출력해보자. 

bean = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70
순수한 클래스라면 다음과 같이 출력되어야 한다.
class hello.core.AppConfig
 
그런데 예상과는 다르게 클래스명에 xxxCGLIB가 붙으면서 상당히 복잡해졌다
이것은 내가 만든 클래스가 아니라 스프링이 CGLIB라는 바이트코드 조작 
라이브러리를 사용해서 AppConfig클래스를 상속받은 임의의 다른 클래스를 만들고
그 다른 클래스를 스프링 빈으로 등록한 것이다.

@Configuration 을 적용하지 않고, @Bean 만 적용하면 어떻게 될까?

@Configuration 을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을보장하지만, 만약 @Bean만 적용하면 어떻게 될까? 

bean = class hello.core.AppConfig
이 출력 결과를 통해서 AppConfig가 CGLIB 기술 없이 순수한 AppConfig로 
스프링 빈에 등록된 것을확인할 수 있다
 
@Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때
싱글톤을 보장하지않는다. 크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration 을 사용하자.

[컴포넌트 스캔]
지금까지 스프링 빈을 등록할때는 자바 코드의 @Bean이나 xml의 <bean>등을 통해서
설정 정보에 직접 등록할 빈을 나열헀다. 하지만 등록해야할 빈의 수가 많으면
매우 번거로운 작업이 되는데 이를 해결하는게 @Autowired라는 기능이다.

@Configuration
@ComponentScan(excludeFilters = @Filter(type = FilterType.ANNOTATION, classes =Configuration.class))
public class AutoAppConfig {

}
컴포넌트 스캔을 사용하려면 머저 @ComponentScan을 설정 정보에 붙여주면된다.
클래스의 @Component애노테이션이 붙여져 있으면 등록한다.

 MemoryMemberRepository @Component 추가
@Component
public class MemoryMemberRepository implements MemberRepository {}

RateDiscountPolicy @Component 추가
@Component
public class RateDiscountPolicy implements DiscountPolicy {}

MemberServiceImpl @Component, @Autowired 추가
@Component
public class MemberServiceImpl implements MemberService {
 private final MemberRepository memberRepository;
 
 @Autowired
 public MemberServiceImpl(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
 }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 