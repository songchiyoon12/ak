[요청 매핑 핸들러구조]
http메시지컨버터는 스프링 mvc어디서 사용되는걸까?

모든 비밀은 애노테이션 기반의 컨트롤러 그러니까 @RequestMapping을 처리하는 핸들러 어댑터인
RequestMappingHandlerAdapter (요청 매핑 헨들러 어뎁터)에 있다

[RequestMappingHandlerAdapter 동작방식] 

생각해보면 애노테이션 기반의 컨트롤러는 매우 다양한 파라미터를 사용할수가있다.
HttpServletRequest, Model은 물론이고 @RequestParam,@ModelAttribute같은 애노테이션
그리고 @RequestBody HttpEntity같은 Http메시지를 처리하는 부분까지 매우 큰 
유연함을 보여주었다 이렇게 파라미터를 유연하게 처리할수 있는 이유는 바로
ArgumentResolver덕분이다. 애노테이션 기반 컨트롤러를 처리하는 RequestMappingHandlerAdapter
바로 이 ArgumentResolver를 호출해서 컨트롤러가 필요로 하는 다양한 파라미터를 
생성한다. 그리고 이렇게 파라미터의 값이 모두 준비되면 컨트롤러를 호출하면서
값을 넘겨준다. 


public interface HandlerMethodArgumentResolver {
boolean supportsParameter(MethodParameter parameter);

@Nullable
Object resolveArgument(MethodParameter parameter, @Nullable
ModelAndViewContainer mavContainer,
NativeWebRequest webRequest, @Nullable WebDataBinderFactorybinderFactory) throws Exception;
}
동작 방식
ArgumentResolver 의 supportsParameter() 를 호출해서 해당 파라미터를 지원하는지
체크하고,지원하면 resolveArgument() 를 호출해서 실제 객체를 생성한다. 
그리고 이렇게 생성된 객체가 컨트롤러 호출시 넘어가는 것이다.



그리고 원한다면 여러분이 직접 이 인터페이스를 확장해서 원하는ArgumentResolver를
만들 수도 있다.실제 확장하는 예제는 향후 로그인 처리에서 진행하겠다.

[ReturnValueHandler]
HandlerMethodReturnValueHandler 를 줄여서 ReturnValueHandle 라 부른다.
ArgumentResolver 와 비슷한데, 이것은 응답 값을 변환하고 처리한다.
컨트롤러에서 String으로 뷰 이름을 반환해도, 동작하는 이유가 바로
ReturnValueHandler 덕분이다.어떤 종류들이 있는지 살짝 코드로 확인만 해보자.

HTTP 메시지 컨버터는 어디쯤 있을까? HTTP 메시지 컨버터를 사용하는
@RequestBody 도 컨트롤러가 필요로 하는 파라미터의 값에 사용된다.

[요청]
@RequestBody를 처리하는 ArgumentResolver가 있고 HttpEntity를 처리하는 
ArgumentResolver가 있다 이 ArgumentResolver들이 Http메시지 컨버터를 사용해서
필요한 객체를 생성하는 것이다.

[응답]
@ResponseBody와 HttpEntity를 처리하는 ReturnValueHandler가 있다 그리고 
여기에서 Http메시지 컨버터를 호출해서 응답 결과를 만든다.

스프링 MVC는 @RequestBody @ResponseBody가 있으면RequestResponseBodyMethodProcessor (ArgumentResolver)
HttpEntity 가 있으면 HttpEntityMethodProcessor (ArgumentResolver)를 사용한다.




 

















