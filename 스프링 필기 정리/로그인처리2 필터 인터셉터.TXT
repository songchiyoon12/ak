[서블릿 필터-소개]

공통관심사항
요구사항을 보면 로그인 한 사용자만 상품 관리 페이지에 들어갈수 있어야한다.
앞에서 로그인을 하지 않은 사용자에게는 상품관리 버튼이 보이지않고 들어갈수
없어야하지만 현 시점에서는 url호출을 하면 상품관리 화면에 들어갈수가 있다.

이렇게 애플리케이션 여러 로직에서 공통으로 관심이 있는것을 공통관심사항 이라고
한다. 여기서는 등록,수정,삭제,조회 등등 여러 로직에서 공통으로 인증에 대해서
관심이 있다. 이러한 공통관심사는 스프링의 aop로도 해결이 가능하지만 웹과 관련된
공통관심사는 지금부터 설명할 서블릿 필터또는 스프링 인터셉터를 사용하는것이
좋다 웹과 관련되 공통 관심사를 처리할 때는 http의 헤더나 url정보들이 필요한다.
서블릿 필터나 스프링 인터셉터는 HttpServletRequest를 제공한다.

필터는 서블릿이 지원하는 수문장이다 필터의 특성은 다음과 같다
http요청->was->필터->서블릿->컨트롤러 
필터를 적용하면 필터가 호출된다음에 서블릿이 호출된다. 그래서 모든 고객의
요청 로그를 남기는 요구사항이 있다면 필터를 사용하면 된다. 참고로 필터는
특정 URL패턴에 적용이 가능하다 /*이라고 하면 모든 요청에 필터가 적용된다.
참고로 스프링을 사용하는 경우 여기서 말하는 서블릿은 디스패처 서블릿이다.


필터 제한
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 //로그인 사용자
HTTP 요청 -> WAS -> 필터(적절하지 않은 요청이라 판단, 서블릿 호출X)
 //비 로그인 사용자
 
필터에서 적절하지 않은 요청이라고 판단하면 거기에서 끝낼수있다.
필터는 체인으로 구성이 되는데 중간에 필터를 자유롭게 추가가 가능하다.

 
 public interface Filter {
 public default void init(FilterConfig filterConfig) 
 throws ServletException{}
 public void doFilter(ServletRequest request, ServletResponse response,
 FilterChain chain) throws IOException, ServletException;
 public default void destroy() {}
}

필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤객체로
생성하고 관리한다.

init() 필터 초기화 메서드 서블릿 컨테이너가 생성될떄 호출
doFilter() 고객의 요청이 올 떄 마다 해당 메서드가 호출된다.필터의 로직을 구현
destroy() 필터 종료 메서드 서블릿 컨테이너가 종료될떄 호출한다.

[서블릿 필터 요청로그]

@Slf4j
public class LogFilter implements Filter{
	
	@Override
	public void init(FilterConfig filterConfig)throws ServletException{
		log.info("log filterConfig init");
	}
	
	@Override
	public void doFilter(ServletRequest request,ServletResponse response,
	FilterChain chain)throws IOException ,ServletException{
		
		HttpServletRequest httpRequest=(HttpServletRequest)request;
		String requestURI=httpRequest.getRequestURI();
		
		String uuid=UUID.randomUUID().toString();
		
		try{
			log.info("REQUEST [{}][{}]",uuid, requestURI);
			chain.doFilter(request,response);
		}catch(Exception e){
			throw e;
		}finally{
			log.info("RESPONSE [{}][{}]",uuid,requestURI);
		}
		
	}
	@Override
	public void destroy(){
		log.info("log filterConfig destroy")
	}

}

public class LogFilter implements Filter {}
필터를 사용하려면 필터 인터페이스를 구현해야 한다.

doFilter(ServletRequest request,ServletResponse response ,FilterChain chain)
http요청이 오면 doFilter()가 호출이된다
ServletRequest는 http요청이 아닌 경우까지 고려를 하여서 만든 인터페이스이다.
http를 사용하면 
HttpServletRequest httpRequest=(HttpServletRequest)request; 와 같이 다운캐스팅
String uuid =UUID.randomUUID().toString(); http요청을 구분하기 위해서 uuid를
생성한다. 

[WebConfig]

@Configuration
public class WebConfig{
	
@Bean
 public FilterRegistrationBean logFilter() {
 	FilterRegistrationBean<Filter> filterRegistrationBean=new
 	FilterRegistrationBean<>();
 	filterRegistrationBean.setFilter(new LogFilter());
 	filterRegistrationBean.setOrder(1);
 	filterRegistrationBean.addUrlPatterns("/*");
 	return filterRegistrationBean;
}
필터를 등록하는 방법은 여러가지가 있지만 스프링 부트를 사용하면
FilterRegistrationBean을 사용해서 등록하면 된다. 
setFilter(new LogFilter()); 등록할 필터를 지정
setOrder(1) 필터는 체인으로 동작 따라서 순서를 지정한것이다.
addUrlPatterns("/*") : 필터를 적용할 URL 패턴을 지정한다.  여러 패턴을 지정

[서블릿 필터 -인증체크]

private static final String[] whitelist = {"/", "/members/add", "/login",
"/logout","/css/*"}; 패턴지정 

public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
      	
	HttpServletRequest httpRequest = (HttpServletRequest) request;
	String requestURI = httpRequest.getRequestURI();
	HttpServletResponse httpResponse = (HttpServletResponse) response;
	
	try {
	log.info("인증 체크 필터 시작 {}", requestURI);
	if (isLoginCheckPath(requestURI)) {
		
	log.info("인증 체크 로직 실행 {}", requestURI);
	HttpSession session = httpRequest.getSession(false);
	
 if (session == null || session.getAttribute(SessionConst.LOGIN_MEMBER) == null) {
			log.info("미인증 사용자 요청 {}", requestURI);
			//로그인으로 redirect
			httpResponse.sendRedirect("/login?redirectURL=" +requestURI);
		return; //여기가 중요, 미인증 사용자는 다음으로 진행하지 않고 끝!
		}
	}
			chain.doFilter(request, response);
		} catch (Exception e) {
			throw e; //예외 로깅 가능 하지만, 톰캣까지 예외를 보내주어야 함
			} finally {
			log.info("인증 체크 필터 종료 {}", requestURI);
	}
	}
 /**
 * 화이트 리스트의 경우 인증 체크X
 */
 private boolean isLoginCheckPath(String requestURI) {
 return !PatternMatchUtils.simpleMatch(whitelist, requestURI);
 }
 
httpResponse.sendRedirect("/login?redirectURL=" +requestURI);을 사용
현재 요청한 경로인 redirectURL를/login에 쿼리 파라미터로 함께 전달한다. 
물론 /login컨트롤러에서 로그인 성공시 해당 경로로 이동하는 기능은 추가로 개발

 서블릿 필터를 잘 사용한 덕분에 로그인 하지 않은 사용자는 나머지 경로에
 들어갈수가 없다 공통 관심사를 서블릿 필터를 사용해서 해결한 덕분에 로그인
 관련 정책이 변경되어도 이 부분만 변경하면 된다. 
 
 
 
 [스프링 인터셉터]
 스프링 인터셉터도 서블릿 필터와 같이 웹과 관련된 공통 관심 사항을 효과적으로
 해결할수있다. 서블릿 필터가 서블릿이 제공하는 기술이라면 스프링 인터셉터는
 스프링 mvc가 제공하는 기술이다. 둘다 웹과 관련된 aop를 처리하지만 방법이다름
 
스프링 인터셉터 흐름
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 

스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에호출
 
 
스프링 인터셉터 인터페이스
스프링의 인터셉터를 사용하려면 HandlerInterceptor 인터페이스를 구현하면 된다.

preHandle 컨트롤러 호출 직전에 호출된다. 응답값이 true이면 다음으로 진행하고
false면 더는 진행하지 않는다. 
postHandle 컨트롤러 호출 후에 호출된다. 
afterCompletion 뷰가 렌더링 된 이후에 호출된다. 

[스프링 인터셉터 요청로그]

@Slf4j
public class LogInterceptor implements HandlerInterceptor {
 
  public static final String LOG_ID = "logId";

	@Override
	public boolean preHandle(HttpServletRequest request,HttpServletResponse
	response,Object handler) throws Exception{
		String redirectURL=request.getRequestURI();
		String uuid=UUID.randomUUID().toString();
		request.setAtribute(LOG_ID,uuid);
		
		if(handler instanceof HadlerMethod){
			HadlerMethod hm=(HadlerMethod)handler;
			//호출할 컨트롤러의 메서드의 모든 정보가 포함되어있다.
			
		}
		log.info("REQUEST [{}][{}][{}]", uuid, requestURI, handler);
			return true; //false 진행X

		
	}
	
	@Override
	public void postHandle(HttpServletRequest request,HttpServletResponse 
	response,Object handler,ModelAndView modelandView) throws Exception{
		log.info("postHandle[{}]",modelandView);
	}
	
	@Override
public void afterCompletion(HttpServletRequest request,HttpServletResponse
response, Object handler, Exception ex) throws Exception {
	String requestURL=request.getRequestURI();
	String logId=(String)request.getAttribute(LOG_ID);
    log.info("RESPONSE [{}][{}]", logId, requestURI);
	if (ex != null) {
	log.error("afterCompletion error!!", ex);
		}
	}
 
 }
 
 String uuid=UUID.randomUUID().toString();
 요청로그를 구분하기 위한 uuid를 생성한다.
 
 request.setAtribute(LOG_ID,uuid)
 서블릿 필터의 경우 지역변수로 해결이 가능하지만 스프링 인터셉터는 호출 시점이
 완전히 분리되어있다 따라서 preHandle에서 지정한 값을 공유하려면 어딘가에
 담아두어야한다 request.getAttribute(LOG_ID)로 찾는다. 
 
 
 if(handler instanceof HadlerMethod){
			HadlerMethod hm=(HadlerMethod)handler;
 }
 
HandlerMethod
핸들러 정보는 어떤 핸들러 매핑을 사용하는가에 따라 달라진다. 스프링을 사용
하면 일반적으로 @Controller ,@RequestMapping을 활용한 핸들러 매핑을 사용하는데
이 경우 핸들러 정보로 HandlerMethod가 넘어온다.

WebConfig등록
@Configuration
public class WebConfig implements WebMvcConfigurer {
 @Override
 public void addInterceptors(InterceptorRegistry registry) {
 registry.addInterceptor(new LogInterceptor())
 .order(1)
 .addPathPatterns("/**")
 .excludePathPatterns("/css/**", "/*.ico", "/error");
 }
 //...
}

[스프링 인터셉터-인증체크]
@Slf4j
public class LoginCheckInterceptor implements HandlerInterceptor{
	
	@Override
	public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception{
			String redirectURL=request.getRequestURI();
			log.info("인증체크 인터셉터 실행{}",requestURI);
			
		HttpSession session=request.getSession(false);
		if(session==null||session.getAttribute(SessionConst.LOGIN_MEMBER==null)){
			log.info("미인증 요청");
			response.sendRedirect("/login?redirectURL="+requestURI);
			return false;
		}
		return true;
		
	}
	
}

 
 
 
 
 