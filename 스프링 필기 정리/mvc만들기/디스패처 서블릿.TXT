
[디스패처 서블릿]
스프링 MVC도 프론트 컨트롤러 패턴으로 구현되어있다. 스프링의 MVC의 프론트 컨트롤러가
바로 디스패처 서블릿이다 그리고 이 디스패처 서블릿이 바로 스프링의 MVC의 핵심이다.

DispacherServlet 서블릿 등록
DispacherServlet도 부모 클래스에서 HttpServletRequest을 상속 받아서 사용하고 서블릿으로 동작한다.
스프링 부트는 DispacherServlet을 서블릿으로 자동으로 등록하면서 모든경로에 대해서 매핑한다.

요청흐름 
서블릿이 호출되면 HttpServlet이 제공하는 service()가 호출된다. 스프링 MVC는 
DispacherServlet의 부모인 FramworkServlet에서 service()을 오버라이드 해두었다.
FramworkServlet.service()을 시작으로 여러 메서드가 호출되면서 DispacherServlet.doDispatch()가 호출된다.


[doDispatch()]

protected void doDispatch(HttpServletRequest request, HttpServletResponseresponse) throws Exception {
	
HttpServletRequest processedRequest = request;
HandlerExecutionChain mappedHandler = null;
ModelAndView mv = null;

// 1. 핸들러 조회 
#핸들러 매핑을통해 요청 url에 매핑된 핸들러를 조회한다.
mappedHandler = getHandler(processedRequest);
if (mappedHandler == null) {
noHandlerFound(processedRequest, response);
return;
}


// 2. 핸들러 어댑터 조회 - 핸들러를 처리할 수 있는 어댑터
#핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());


// 3. 핸들러 어댑터 실행 -> 4. 핸들러 어댑터를 통해 핸들러 실행 -> 5. ModelAndView 반환
#핸들러 어댑터를 실행하고,핸들러(컨트롤러)를 실행한다,핸들러 어댑터는 핸들러가 반환하는 정보를
#ModelAndView로 변환해서 반환한다.
mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
processDispatchResult(processedRequest, response, mappedHandler, mv,
dispatchException);
}


private void processDispatchResult(HttpServletRequest request,
HttpServletResponse response, HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {
// 뷰 렌더링 호출
render(mv, request, response);
}


protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {
	
View view;
String viewName = mv.getViewName();
// 6. 뷰 리졸버를 통해서 뷰 찾기, 7. View 반환
view = resolveViewName(viewName, mv.getModelInternal(), locale, request);


// 8. 뷰 렌더링
view.render(mv.getModelInternal(), request, response);
}


[인터페이스 살펴보기]
스프링 mvc의 큰 강점은 DispacherServlet 코드의 변경없이 원하는 기능을 변경하거나
확장을 할수 있다는 점이다. 지금까지 설명한 대부분을 확장 가능할수 있게 인터페이스를
제공한다. 이 인터페이스들만 구현해서 DispacherServlet에 등록하면 컨트롤러 제작이 가능하다.

[주요인터페이스]
주요 인터페이스 목록
핸들러 매핑: org.springframework.web.servlet.HandlerMapping
핸들러 어댑터: org.springframework.web.servlet.HandlerAdapter
뷰 리졸버: org.springframework.web.servlet.ViewResolver


[핸들러 매핑과 핸들러 어댑터]

핸들러 매핑과 핸들러 어댑터가 어떤 것들이 어떻게 사용되는지 알아보자 

public interface Controller {
ModelAndView handleRequest(HttpServletRequest request, HttpServletResponseresponse) throws Exception;
}


@Component("/springmvc/old-controller")
public class OldController implements Controller {
 @Override
 public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response) throws Exception {
 System.out.println("OldController.handleRequest");
 return null;
 }
}
@Component: 이 컨트롤러는 /springmvc/old-controller라는 이름의 스프링 빈으로 등록되었다.
			빈의 이름으로 URL매핑할 것이다.
			
콘솔에 OldController.handleRequest이 출력되면 성공이다. 위 컨트롤러가 호출되려면 다음 2가지가 필요하다.

핸들러 매핑이란?
Dispatcher Servlet이 요청 URI가 어떤 핸들러와 매핑되는지 찾는 과정이다.
핸들러 매핑은 결국 요청과 알맞는 핸들러 객체를 Dispatcher Servlet에 리턴한다.
 
핸들러 어댑터란?
핸들러 매핑에서 리턴받은 핸들러 객체를 가지고 이에 맞는 어댑터를 찾는 과정이다.
여기서 어댑터란, 2개 이상의 인터페이스에 스펙이 맞지 않을 때, 중간에 이 스펙을 맞도록 변환해주는 역할을 하는 객체이다.


스프링 부트가 자동 등록하는 핸들러 매핑과 핸들러 어댑터

HandlerMapping
0= RequestMappingHandlerMapping 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
1= BeanNameUrlHandlerMapping :스프링 빈의 이름으로 핸들러를 찾는다.

HandlerAdapter
0= RequestMappingHandlerAdapter :애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
1 = HttpRequestHandlerAdapter : HttpRequestHandler 처리
2 = SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용)처리

핸들러 매핑도 핸들러 어댑터도 모두 순서대로 찾고 만약 없다면 다음 순서로 넘어간다.

1.핸들러 매핑으로 핸들러조회
HandlerMapping을 순서대로 실행해서 핸들러를 찾는다
이 경우 빈이름으로 핸들러를 찾아야 하기 때문에 이름 그대로 빈 이름으로 핸들러를 찾아주는
BeanNameUrlHandlerMapping가 실행에 성공하고 핸들러인 OldController를 반환한다.

2.핸들러 어댑터 조회
1.HandlerAdapter의 supports()를 순서대로 호출한다.
2.SimpleControllerHandlerAdapter가 Controller인터페이스를 지원하므로 대상이 된다.

3.핸들러 어댑터 실행
1.디스패처 서블릿이 조회한 SimpleControllerHandlerAdapter를 실행하면서 핸들러 정보도 함께 넘겨준다.
2.SimpleControllerHandlerAdapter는 핸들러인 OldController를 내부에서 실행하고 그 결과를 반환한다.

정리 - OldController 핸들러매핑, 어댑터
OldController 를 실행하면서 사용된 객체는 다음과 같다.
HandlerMapping = BeanNameUrlHandlerMapping
HandlerAdapter = SimpleControllerHandlerAdapter


[MyHandlerAdapter]
public interface MyHandlerAdapter {
 boolean supports(Object handler); 
 ModelView handle(HttpServletRequest request, HttpServletResponse response,Object handler) throws ServletException, IOException;
}

boolean supports(Object handler)
handler는 컨트롤러를 말한다. 어댑터가 해당 컨트롤러를 처리할 수 있는지 판단하는 메서드다.

ModelView handle(HttpServletRequest request, HttpServletResponse response, Objecthandler)
어댑터는 실제 컨트롤러를 호출하고, 그 결과로 ModelView를 반환해야 한다.
실제 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 ModelView를 직접 생성해서라도
반환해야 한다. 이전에는 프론트 컨트롤러가 실제 컨트롤러를 호출했지만 이제는 이 어댑터를 통해서 
실제 컨트롤러가 호출된다.






