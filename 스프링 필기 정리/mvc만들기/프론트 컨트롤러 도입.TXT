
[프로늩 컨트롤러 도입]

public interface ControllerV1 {
 void process(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException;
}
서블릿과 비슷한 모양의 컨트롤러 인터페이스를 도입한다. 각 컨트롤러들은 이 인터페이스를 구현하면 된다.
프론트 컨트롤러는 이 인터페이스를 호출해서 구현과 관계없이 로직의 일관성을 가져갈 수 있다.

이제 이 인터페이스를 구현한 컨트롤러를 만들어보자 지금 단계에서는 기존 로직을 최대한 유지하는게 핵심이다.

[회원등록 컨트롤러]

public class MemberFormControllerV1 implements ControllerV1 {
 @Override
 public void process(HttpServletRequest request, HttpServletResponseresponse) throws ServletException, IOException { 
 
 String viewPath = "/WEB-INF/views/new-form.jsp";
 RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
 dispatcher.forward(request, response);
 
 }
}
[회원 저장 컨트롤러]


public class MemberSaveControllerV1 implements ControllerV1 {
	
 private MemberRepository memberRepository = MemberRepository.getInstance();
 
 @Override
 public void process(HttpServletRequest request, HttpServletResponseresponse) throws ServletException, IOException {
 	
 String username = request.getParameter("username");
 int age = Integer.parseInt(request.getParameter("age"));
 
 Member member = new Member(username, age);
 memberRepository.save(member);
 request.setAttribute("member", member);
 
 String viewPath = "/WEB-INF/views/save-result.jsp";
 RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
 dispatcher.forward(request, response);
 }
}

[회원 목록 컨트롤러]

public class MemberListControllerV1 implements ControllerV1 {
	
 private MemberRepository memberRepository = MemberRepository.getInstance();
 
 @Override
 public void process(HttpServletRequest request, HttpServletResponseresponse) throws ServletException, IOException {
 	
 List<Member> members = memberRepository.findAll();
 request.setAttribute("members", members);
 
 String viewPath = "/WEB-INF/views/members.jsp";
 RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
 dispatcher.forward(request, response);
 
 }
}

[프론트 컨트롤러]

@WebServlet(name = "frontControllerServletV1", urlPatterns = "/frontcontroller/v1/*")
public class FrontControllerServletV1 extends HttpServlet {
	
 private Map<String, ControllerV1> controllerMap = new HashMap<>();
 
 public FrontControllerServletV1() {
 controllerMap.put("/front-controller/v1/members/new-form", newMemberFormControllerV1());
 controllerMap.put("/front-controller/v1/members/save", newMemberSaveControllerV1());
 controllerMap.put("/front-controller/v1/members", newMemberListControllerV1());
 }
 
 @Override
 protected void service(HttpServletRequest request, HttpServletResponseresponse)throws ServletException, IOException {
 	
 System.out.println("FrontControllerServletV1.service");
 String requestURI = request.getRequestURI();
 ControllerV1 controller = controllerMap.get(requestURI);
 
 if (controller == null) {
 response.setStatus(HttpServletResponse.SC_NOT_FOUND);
 return;
 }
 
 controller.process(request, response);
 }
 
}

urlPatterns
urlPatterns = "/front-controller/v1/*" : /front-controller/v1를 포함한 하위 모든 요청은 이 서블릿에서 받아들인다.

controllerMap
key 매핑 url
value 호출될 컨트롤러

service()
먼저 requestURI를 조회해서 실제 호출할 컨트롤러를 controllerMap에서 찾는다 만약 없으면 404상태코드를
반환한다. 컨트롤러를 찾고 controller.process(request,response)를 호출해서 해당 컨트롤러 실행




[view분리]

모든 컨트롤러에서 뷰로 이동하는 부분에 중복이 있고 깔끔하지 않다.

String viewPath ="/WEB-INF/views/new-form.jsp";
RequestDispatcher dispatcher =request.getRequestDispatcher(viewPath);
dispatcher.forward(request,response);

이 부분을 깔끔하게 분리하기 위해 별도로 뷰를 처리하는 객체를 만들자.


[myView]
public class MyView {
 private String viewPath;
 
 public MyView(String viewPath) {
 this.viewPath = viewPath;
 }
 
 public void render(HttpServletRequest request, HttpServletResponseresponse) throws ServletException, IOException {
 RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
 dispatcher.forward(request, response);
 }
}
이 코드만 봐서는 어떻게 활용하는지 아직 감이 오지 않는다. 다음 버전의 컨트롤러 인터페이스를 만들어보자
컨트롤러가 뷰를 반환하는 특징이 있따.

[ControllerV2]
public interface ControllerV2 {
 MyView process(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException;
}

[회원등록 폼]

public class MemberFormControllerV2 implements ControllerV2 {
 @Override
 public MyView process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 return new MyView("/WEB-INF/views/new-form.jsp");
 }
}

이제 각 컨트롤러는 복잡한 dispatcher.forward()를 생성하지 않아도 되고 단순히 myView객체를 생성하고 뷰 이름만 넣고 반환하면 된다.

[회원 저장]

public class MemberSaveControllerV2 implements ControllerV2 {
 private MemberRepository memberRepository = MemberRepository.getInstance();
 
 @Override
 public MyView process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 	
 String username = request.getParameter("username");
 int age = Integer.parseInt(request.getParameter("age"));
 
 Member member = new Member(username, age);
 memberRepository.save(member);
 
 request.setAttribute("member", member);
 return new MyView("/WEB-INF/views/save-result.jsp");
		}
	}


[회원목록]




public class MemberListControllerV2 implements ControllerV2 {
 private MemberRepository memberRepository = MemberRepository.getInstance();
 
 @Override
 public MyView process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 	
 List<Member> members = memberRepository.findAll();
 request.setAttribute("members", members);
 return new MyView("/WEB-INF/views/members.jsp");
 
 }
}


[프론트 컨트롤러V2]


@WebServlet(name = "frontControllerServletV2", urlPatterns = "/frontcontroller/v2/*")

public class FrontControllerServletV2 extends HttpServlet {
 private Map<String, ControllerV2> controllerMap = new HashMap<>();
 public FrontControllerServletV2() {
 controllerMap.put("/front-controller/v2/members/new-form", new
MemberFormControllerV2());
 controllerMap.put("/front-controller/v2/members/save", new
MemberSaveControllerV2());
 controllerMap.put("/front-controller/v2/members", new
MemberListControllerV2());
 }
 @Override
 protected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
 String requestURI = request.getRequestURI();
 ControllerV2 controller = controllerMap.get(requestURI);
 if (controller == null) {
 response.setStatus(HttpServletResponse.SC_NOT_FOUND);
 return;
 }
 MyView view = controller.process(request, response);
 view.render(request, response);
 }
}


[Model추가]
서블릿 종속성 제거
컨트롤러 입장세너느 HttpServletRequest ,HttpServletResponse가 필요할까? 요청 파라미터 정보는 자바의 Map으로 
대신 넘기도록 하면 지금 구조에서는 컨트롤러가 서블릿 기술을 몰라도 동작이 가능하다.
그리고 request객체를 Model로 사용하는 대신에 별도의 Model객체를 만들어서 반환하면 된다. 우리가 구현하는 컨트롤러가
서블릿 기술을 전혀 사용하지 않도록 변경해보자 이렇게 하면 구현 코드도 매우 단순해진다.

[뷰 이름 중복 제거]
컨트롤러에서 지정하는 뷰 이름에 중복이 있는 것을 확인할수가있다. 컨트롤러는 뷰의 논리 이름을 
반환하고 실제 물리 위치의 이름은 프론트 컨트롤러에서 처리하도록 단순화하자 

[ModelView]
지금까지 컨트롤러에서 서블릿에 종속적인 HttpServletRequest를 사용했다. 그리고 Model도 
request.setAttribute()를 통해 데이터를 저장하고 뷰에 전달했다. 서블릿의 종속성을 제거하기 위해
Model을 직접 만들고 추가로 View이름까지 전달하는 객체를 만들어보자. 

public class ModelView {
 private String viewName;
 private Map<String, Object> model = new HashMap<>();
 public ModelView(String viewName) {
 this.viewName = viewName;
 }
 public String getViewName() {
 return viewName;
 }
 public void setViewName(String viewName) {
 this.viewName = viewName;
 }
 public Map<String, Object> getModel() {
 return model;
 }
 public void setModel(Map<String, Object> model) {
 this.model = model;
 }
}















