[검증 요구사항]
상품 관리 시스템에 새로운 요구사항이 추가되었다.
요구사항: 검증 로직 추가
타입 검증
가격, 수량에 문자가 들어가면 검증 오류 처리
필드 검증
상품명: 필수, 공백X
가격: 1000원 이상, 1백만원 이하
수량: 최대 9999
특정 필드의 범위를 넘어서는 검증
가격 * 수량의 합은 10,000원 이상

[검증 직접처리]
사용자가 상품등록폼에서 정상범위의 데이터를 입력하면 서버에서는 검증 로직이
통과하고 상품을 저장하고 상품 상세화면으로 redirect한다. 

성공예시
0 get/ add 상품등록
1 post /add 상품저장
2 redirect/items/{id}
3 get/items{id} 상품상세

그러나 고객이 상품등록 폼에서 상품명을 입력하지 않거나 가격 수량등이 너무 작거나커서 검증범위를 넘어서면 서버 검증 로직이 실패해야한다 이렇게 검증에 실패할 경우고객에게 다시 상품 등록 폼을 보여주고 어떤 값을 잘못 입력했는지 친절하게 알려주어야 한다.

[검증 직접개발]

@PostMapping("/add")
public String addItem(@ModelAttribute Item item,RedirectAttributes redirect
Attributes , Model model)

Map<String ,String> errors=new HashMaP<>();

//검증로직

if(!StringUtils.hasText(item.getItemName())){
	errors.put("itemName","상품이름은 필수");
}
if(item.getPrice()==null || item.getPrice()<1000|| item.getPrice()>1000000){
	errors.put("price","가격은 1,000~1,000,000까지 허용")
}
if (item.getQuantity() == null || item.getQuantity() >= 9999) {
 errors.put("quantity", "수량은 최대 9,999 까지 허용합니다.");
 }
 
 //특정 필드가 아닌 복합 룰 검증 
 
 if (item.getPrice() != null && item.getQuantity() != null) {
 int resultPrice = item.getPrice() * item.getQuantity();
 if (resultPrice < 10000) {
 errors.put("globalError", "가격 * 수량의 합은 10,000원 이상이어야 합니다.
현재 값 = " + resultPrice);
 }
 }

//검증 실패하면 다시 입력폼으로 
 if (!errors.isEmpty()) {
 model.addAttribute("errors", errors);
 return "validation/v1/addForm";
 }
//성공로직 
Item savedItem = itemRepository.save(item);
 redirectAttributes.addAttribute("itemId", savedItem.getId());
 redirectAttributes.addAttribute("status", true);
 return "redirect:/validation/v1/items/{itemId}";
 
 검증오류 보관 
 Map<String,String> errors=new HashMap<>();

검증시 오류가 발생하면 errors에 담아둔다 이때 어떤 필드에서 오류가 발생했는지
구분하기 위해서 오류가 발생한 필드명을 key로 사용한다. 이후 뷰에서 이 데이터를
사용해서 고객에게 친절한 오류 메시지를 출력이 가능하다.

특정필드를 넘어서는 오류를 처리할떄는 필드이름을 넣을수는 없으니  globalError라는
key를 사용한다.


[BindingResult1]

@PostMapping("/add")
public String addItemV1(@ModelAttribute Item item,BindingResult bindigResult,
RedirectAttributes redirectAttributes){
	
	if (!StringUtils.hasText(item.getItemName())){
		bindigResult.addError(new FieldError("item","itemName","상품이름은
		필수입니다."));
	}
	
	if (item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() >
1000000) {
 bindingResult.addError(new FieldError("item", "price", "가격은 1,000 ~
1,000,000 까지 허용합니다."));

 }
 if (item.getQuantity() == null || item.getQuantity() > 10000) {
 bindingResult.addError(new FieldError("item", "quantity", "수량은 최대
9,999 까지 허용합니다."));
 }
 
 //특정 필드 예외가 아닌 전체 예외
 if (item.getPrice() != null && item.getQuantity() != null) {
 int resultPrice = item.getPrice() * item.getQuantity();
 if (resultPrice < 10000) {
 bindingResult.addError(
 	new ObjectError("item", "가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재 값 = " + resultPrice));
 }
 }
 if (bindingResult.hasErrors()) {
 log.info("errors={}", bindingResult);
 return "validation/v2/addForm";
 }
 //성공 로직
 Item savedItem = itemRepository.save(item);
 redirectAttributes.addAttribute("itemId", savedItem.getId());
 redirectAttributes.addAttribute("status", true);
 return "redirect:/validation/v2/items/{itemId}";
}
}
주의
BindingResult bindigResult 파라미터의 위치는 @ModelAttribute 다음이다.



필드에러

if (!StringUtils.hasText(item.getItemName())) {
 bindingResult.addError(new FieldError("item", "itemName", "상품 이름은
필수입니다."));
}

public FieldError(String objectName, String field, String defaultMessage) {}
objectName:@ModelAttribute
field:오류가 발생한 필드 이름
defaultMessage:오류 기본메시지 

오브젝트 에러
bindingResult.addError(new ObjectError("item", "가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재 값 = " + resultPrice));

public ObjectError(String objectName, String defaultMessage) {}
특정 필드를 넘어서는 오류가 있으면 ObjectError 객체를 생성해서
 bindingResult 에 담아두면 된다.
objectName : @ModelAttribute 의 이름
defaultMessage : 오류 기본 메시지

글로벌 오류 처리
<div th:if="${#fields.hasGlobalErrors()}">
 <p class="field-error" th:each="err : ${#fields.globalErrors()}" 
 th:text="${err}">전체 오류 메시지</p>
</div>


필드 오류 처리
<input type="text" id="itemName" th:field="*{itemName}"
 th:errorclass="field-error" class="form-control" 
 placeholder="이름을입력하세요">
 
<div class="field-error" th:errors="*{itemName}">
 상품명 오류
</div>

타임리프 스프링 검증 오류 통합 기능

타임리프는 스프링의 BindingResult 를 활용해서 편리하게 
검증 오류를 표현하는 기능을 제공한다.
#fields : #fields 로 BindingResult 가 제공하는 검증 오류에 접근할 수 있다.
th:errors : 해당 필드에 오류가 있는 경우에 태그를 출력한다. th:if 의 편의버전
th:errorclass : th:field 에서 지정한 필드에 오류가 있으면 class 정보를 추가

[BindingResult2]
스프링이 제공하는 검증 오류를 보관하는 객체이다 검증 오류가 발생하면 여기에
보관하면 된다. BindingResult가 있으면 @ModelAttribute에 데이터 바인딩시 
오류가 발생해도 컨트롤러가 호출이된다.

예)@ModelAttribute에 바인딩 시 타입 오류가 발생하면?
BindingResult가 없으면 ->400오류가 발생하면서 컨트롤러가 호출이 되지않고
오류페이지로 이동한다.

BindingResult가 있으면->오류정보 FieldError를 BindingResult에 담아서 컨트롤러를
정상호출한다. 

[BindingResult에 검증오류를 적용하는 3가지 방법]

@ModelAttribute의 객체에 타입 오류 등으로 바인딩이 실패하는 경우 스프링이
FieldError를 생성해서 BindingResult에 넣어준다. 




[필드에러 ,오브젝트에러]

FieldError는 2가지 생성자를 제공한다.

public FieldError(String objectName, String field, String defaultMessage);
(new FieldError("item", "price", "가격은 1,000 ~1,000,000 까지 허용합니다."));

public FieldError(String objectName, String field, @Nullable Object
rejectedValue, boolean bindingFailure, @Nullable String[] codes, @Nullable
Object[] arguments, @Nullable String defaultMessage)

new FieldError("item", "price", item.getPrice(), false, null, null, "가격은 1,000 ~1,000,000 까지 허용합니다.")

objectName 오류가발생한 객체이름
field 오류필드
rejectedValue 사용자가 입력한값
bindingFailure 타입오류 같은 바인딩 실패인지 검증실패인지 구분 값 
codes 메시지 코드
arguments 메시지에서 사용하는 인자
defaultMessage 기본 오류 메시지

사용자의 입력 데이터가 컨트롤러의 @ModelAttribute에 바인딩되는 시점에 오류가
발생하면 모델객체에 사용자 입력 값을 유지하기 어렵다 예를 들어서 가격에 숫자가
아닌 문자가 입력된다면 가격은 Integer타입이므로 문자를 보관할수 있는 방법이
없다 그래서 오류가 발생한경우 사용자 입력 값을 보관하는 별도의 방법이 필요하다
그리고 이렇게 보관한 사용자 입력 값을 검증 오류 발생시 화면에 다시 출력하면
된다. #FieldError는 오류 발생시 사용자 입력값을 저장하는 기능을 제공한다.

여기서 rejectedValue가 바로 오류 발생시 사용자 입력값을 저장하는 필드다
bindingFailure는 타입오류 같은 바인딩이 실패했는지 여부를 적어주면 된다.
여기선 바인딩이 실패한게 아니므로 false를 사용한다.

[오류 코드와 메시지 처리]

FieldError생성자 

public FieldError(String objectName, String field, String defaultMessage);
public FieldError(String objectName, String field, 
@Nullable Object rejectedValue, boolean bindingFailure,
@Nullable String[] codes, @Nullable Object[] arguments,
@Nullable String defaultMessage)

errors.properties라는 별도의 파일을 만들어서 메시지를 관리하자.

설정
spring.messages.basename=messages,errors

errors.properties
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.
totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}


if (!StringUtils.hasText(item.getItemName())) {
 bindingResult.addError(new FieldError("item", "itemName",
item.getItemName(), false, new String[]{"required.item.itemName"}, null,
null));
 }
 if (item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() >
1000000) {
 bindingResult.addError(new FieldError("item", "price", item.getPrice(),
false, new String[]{"range.item.price"}, new Object[]{1000, 1000000}, null));
 }
 if (item.getQuantity() == null || item.getQuantity() > 10000) {
 bindingResult.addError(new FieldError("item", "quantity",
item.getQuantity(), false, new String[]{"max.item.quantity"}, new Object[]
{9999}, null));
 }
 //특정 필드 예외가 아닌 전체 예외
 if (item.getPrice() != null && item.getQuantity() != null) {
 int resultPrice = item.getPrice() * item.getQuantity();
 if (resultPrice < 10000) {
 bindingResult.addError(new ObjectError("item", new String[]
{"totalPriceMin"}, new Object[]{10000, resultPrice}, null));
 }
 }


if (bindingResult.hasErrors()) {
 log.info("errors={}", bindingResult);
 return "validation/v2/addForm";
 }
 
 
 
[오류 코드와 메시지처리 2]
FieldError ObjectError는 다루기 너무 번거롭다
오류 코드도 좀 더 자동화 할 수 있지 않을까?
컨트롤로에서 BindingResult는 검증해야할 객체인 target바로 다음에 온다.
따라서 BindingResult는 이미 본인이 검증해야할 객체인 taget을 알고있다.


log.info("objectName={}", bindingResult.getObjectName());
log.info("target={}", bindingResult.getTarget());
출력 결과
objectName=item //@ModelAttribute name
target=Item(id=null, itemName=상품, price=100, quantity=1234)

BindingResult가 제공하는 rejectValue(), reject()를 사용하면 FieldError,
ObjectError를 직접 생성하지 않고 깔끔하게 검증 오류를 다룰수있다.

rejectValue() , reject() 를 사용해서 기존 코드를 단순화해보자

bindigResult.rejectValue("itemName","required");
bindigResult.rejectValue("price","range",new Object[]{1000,10000000},null);
bindingResult.reject("totalPriceMin", new Object[]{10000, resultPrice}, null);

rejectValue()
void rejectValue(@Nullable String field, String errorCode,
@Nullable Object[] errorArgs, @Nullable String defaultMessage);

field : 오류 필드명

errorCode : 오류 코드(이 오류 코드는 메시지에 등록된 코드가 아니다. 
messageResolver를 위한 오류 코드이다.)
errorArgs : 오류 메시지에서 {0} 을 치환하기 위한 값
defaultMessage : 오류 메시지를 찾을 수 없을 때 사용하는 기본 메시지  

void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String
defaultMessage);

[오류 코드와 메시지 처리3]
 
오류 코드를 만들떄 다음과 같이 자세히 만들수 있고.
required.item.itemName 상품이름은 필수 입니다.
range.item.price 상품의 가격 범위 오류입니다.

또는 다음과 같이 단순하게 만들수도 있다.

required 필수값
range 범위오류 입니다.

그런데 오류 메시지에 required.item.itemName 와 같이 객체명과 필드명을 조합한세밀한 메시지 코드가 있으면 이 메시지를 높은 우선순위로 사용하는 것이다.

#Level1 우선순위 더 높음
required.item.itemName: 상품 이름은 필수 입니다.
#Level2
required: 필수 값 입니다.

[오류 코드와 메시지 처리4]

rejectValue(),reject()는 내부에서 MessageCodeResolver를 사용한다 여기에서
메시지 코드들을 생성한다. FieldError,ObjectError의 생성자를 보면 오류코드를
하나가 아니라 여러 오류 코드를 가질수 있다. 
codes [range.item.price, range.price, range.java.lang.Integer, range]


FieldError rejectValue("itemName", "required")
다음 4가지 오류 코드를 자동으로 생성
required.item.itemName
required.itemName
required.java.lang.String
required

ObjectError reject("totalPriceMin")
다음 2가지 오류 코드를 자동으로 생성
totalPriceMin.item
totalPriceMin

오류 메시지 출력
타임리프 화면을 렌더링 할때 th:errors가 실행된다. 만약 이떄 오류가 있다면 
생성된 오류 메시지 코드를 순서대로 돌아가면서 메시지를 찾는다 그리고 없으면
디폴트 메시지를 출력한다.

[오류 코드와 메시지 처리5]

MessageCodesResolver 는 required.item.itemName 처럼 구체적인 것을 먼저 
만들어주고,required 처럼 덜 구체적인 것을 가장 나중에 만든다.
이렇게 하면 앞서 말한 것 처럼 메시지와 관련된 공통 전략을 편리하게 
도입할 수 있다.

[오류 코드와 메시지처리 6]
검증오류 코드는 다음과 같이 2가지로 나눌수 있다.
개발자가 직접 설정한 오류코드 rejectValue()를 직접호출 

[validator분리1]
컨트롤러에서 검증 로직이 차지하는 부분은 매우크다 이런 경우 별도의 클래스로
역활을 분리하는것이 효율적이다!



@Component
public class ItemValidator implements Validator {
	
 @Override
 public boolean supports(Class<?> clazz) {
 return Item.class.isAssignableFrom(clazz);
 }
 
 @Override
 public void validate(Object target, Errors errors) {
 Item item = (Item) target;
 ValidationUtils.rejectIfEmptyOrWhitespace(errors, "itemName","required");

 if (item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
 errors.rejectValue("price", "range", new Object[]{1000, 1000000},
null);
 }
 
 if (item.getQuantity() == null || item.getQuantity() > 10000) {
 errors.rejectValue("quantity", "max", new Object[]{9999}, null);
 }
 
 //특정 필드 예외가 아닌 전체 예외
 if (item.getPrice() != null && item.getQuantity() != null) {
 int resultPrice = item.getPrice() * item.getQuantity();

 if (resultPrice < 10000) {
 errors.reject("totalPriceMin", new Object[]{10000,resultPrice}, null);
 }
 }
 }
}



스프링은 검증을 체계적으로 제공하기 위해 다음 인터페이스를 제공한다.
public interface Validator {
해당 검증기를 지원하는 여부확인
boolean supports(Class<?> clazz); 
검증대상 객체와 BindingResult
void validate(Object target, Errors errors);
}

사용해보기 

private final ItemValidator itemValidator;
@PostMapping("/add")
public String addItemV5(@ModelAttribute Item item, BindingResult bindingResult,
RedirectAttributes redirectAttributes) {
	
 itemValidator.validate(item, bindingResult);


 if (bindingResult.hasErrors()) {
 log.info("errors={}", bindingResult);
 return "validation/v2/addForm";
 }

[validator분리2]
스프링이 validator인터페이스를 별도로 제공하는 이유는 체계적으로 검증 기능을
도입하기 위해서다 그런데 앞에서는 검증기를 직접 불러서 사용했고 이렇게 사용
해도 된다. 그런데 validator인터페이스를 사용해서 검증기를 만들면 스프링의
추가적인 도움을 받을수있다.




@InitBinder
해당 Controller로 들어오는 요청에 대해 추가적인 설정을 하고 싶을 때 사용할
수 있다. 또한 모든 요청 전에 InitBinder를 선언한 메소드가 실행된다.

public void init(WebDataBinder dataBinder) {
이렇게 WebDataBinder 에 검증기를 추가하면 해당 컨트롤러에서는 검증기를 자동으로 적용할 수 있다
 log.info("init binder {}", dataBinder);
 dataBinder.addValidators(itemValidator);
}

@PostMapping("/add")
public String addItemV6(@Validated @ModelAttribute Item item, BindingResult
bindingResult, RedirectAttributes redirectAttributes) {
 if (bindingResult.hasErrors()) {
 log.info("errors={}", bindingResult);
 return "validation/v2/addForm";
 }
 //성공 로직
 Item savedItem = itemRepository.save(item);
 redirectAttributes.addAttribute("itemId", savedItem.getId());
 redirectAttributes.addAttribute("status", true);
 return "redirect:/validation/v2/items/{itemId}";
}

validator를 직접 호출하는 부분이 사라지고 대신에 검증 대상앞에 @validated가
붙었다. @Validated 는 검증기를 실행하라는 애노테이션이다.
이 애노테이션이 붙으면 앞서 WebDataBinder 에 등록한 검증기를 찾아서 실행한다그런데 여러 검증기를 등록한다면 그 중에 어떤 검증기가 실행되어야 할지 구분이
필요하다. 이때 supports() 가 사용된다. 














