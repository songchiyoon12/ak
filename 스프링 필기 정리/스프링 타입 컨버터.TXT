[스프링 타입 컨버터 소개]

문자를 숫자로 변환하거나 반대로 숫자를 문자로 변화해야 하는 것 처럼 애플리케이션
을 개발하다 보면 타입을 변환해야 하는 경우가 많다.

@RestController
public class HelloController{
	@GetMapping("/hello-v1")
	public String helloV1(HttpServletRequest request){
		Sring data=request.getParameter("data");//문자타입으로 조회
		Integer intValue = Integer.valueOf(data); //숫자 타입으로 변경 
		Sout("intValue="+intValue);
		return "ok";
	}
}
http://localhost:8080/hello-v1?data=10

분석
String data=request.getParameter("data")
http요청 파라미터는 모두 문자로 처리된다 따라서 요청 파라미터를 자바에서 다른
타입으로 변환해서 사용하고 싶으면 다음과 같이 숫자 타입으로 변환하는 과정을 
거쳐야한다 Integer intValue=Integer.valueOf(data);

@GetMapping("/hello-v2")
public String helloV2(@RequestParam Integer data) {
 System.out.println("data = " + data);
 return "ok";
}

앞서 보았듯이 HTTP 쿼리 스트링으로 전달하는 data=10 부분에서 10은 숫자 10이 아니라 문자 10이다. 스프링이 제공하는 @RequestParam 을 사용하면 이 문자 10을 Integer 타입의 숫자 10으로 편리하게받을 수 있다. 이것은 스프링이 중간에서 
타입을 변환해주었기 때문이다

URL 경로는 문자다. /users/10 여기서 10도 숫자 10이 아니라 그냥 문자 "10"이다. data를 Integer 타입으로 받을 수 있는 것도 스프링이 타입 변환을 해주기 때문이다.

[컨버터 인터페이스]
스프링은 확장 가능한 컨버터 인터페이스를 제공한다 개발자는 스프링에 추가적인 
타입 변환이 필요하면 이 컨버터 인터페이스를 구현해서 등록하면 된다.

public interface Converter<S, T> {
 T convert(S source);
}
예를 들어서 문자로 "true" 가 오면 Boolean 타입으로 받고 싶으면 String Boolean타입으로 변환되도록 컨버터 인터페이스를 만들어서 등록하고, 반대로 적용하고 
싶으면 Boolean String타입으로 변환되도록 컨버터를 추가로 만들어서 등록하면 된다

[타입 컨버터]

문자열을->정수형으로
@Slf4j
public class StringToIntegerConverter implements Converter<String, Integer> {
 @Override
 public Integer convert(String source) {
 log.info("convert source={}", source);
 return Integer.valueOf(source);
 }
}
[사용자 정의 컨버터]

@Getter
@EqualsAndHashCode
public class IpPort {
	
 private String ip;
 private int port;
 
 public IpPort(String ip, int port) {
 this.ip = ip;
 this.port = port;
 
 }
}

@Slf4j
public class StringToIpPortConverter implements Converter<String, IpPort> {
 
	@Override
	public IpPort convert(String source) {
		log.info("convert source={}", source);
		
	String[] split = source.split(":");
	String ip = split[0];
	int port = Integer.parseInt(split[1]);
	return new IpPort(ip, port);
 }
}
[컨버전 서비스 ]
이렇게 타입 컨버터를 하나한 직접찾아서 타입 변환에 사용하는 것은 매우 불편하다.
그래서 스프링은 개별 컨버터를 모아두고 그것들을 묶어서 편리하게 사용할수있게
제공하는데 이것이 바로 컨버전 서비스이다.

public interface ConversionService {
boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType);
boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor
targetType);
<T> T convert(@Nullable Object source, Class<T> targetType);
Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType,
TypeDescriptor targetType);
}
컨버전 서비스 인터페이스는 단순히 컨버팅이 가능한가? 확인하는 기능과 
컨버팅 기능을 제공한다.


public class ConversionServiceTest {
 @Test
 void conversionService() {
 //등록
 DefaultConversionService conversionService = new DefaultConversionService();
 conversionService.addConverter(new StringToIntegerConverter());
 conversionService.addConverter(new IntegerToStringConverter());
 conversionService.addConverter(new StringToIpPortConverter());
 conversionService.addConverter(new IpPortToStringConverter());
 //사용
 assertThat(conversionService.convert("10",Integer.class)).isEqualTo(10);
 assertThat(conversionService.convert(10,String.class)).isEqualTo("10");
 IpPort ipPort = conversionService.convert("127.0.0.1:8080",IpPort.class);
 
 assertThat(ipPort).isEqualTo(new IpPort("127.0.0.1", 8080));
 
 String ipPortString = conversionService.convert(new IpPort("127.0.0.1",8080), String.class);
 assertThat(ipPortString).isEqualTo("127.0.0.1:8080");
 }
}
등록과 사용분리 
컨버터를 등록할떄는 StringToIntegerConverter같은 타입컨버터를 명확히
알고있어야한다 반면에 컨버터를 사용하는 입장에서는 타입 컨버터를 전혀 몰라도
된다. 타입 컨버터들은 모두 컨버전 서비스 내부에 숨어서 제공이된다. 따라서
타입 변환을 원하는 사용자는 컨버전 서비스 인터페이스에만 의존하면 된다.

컨버전 서비스 사용
Integer value = conversionService.convert("10", Integer.class)

[스프링에 Converter적용하기]

@Configuration
public class WebConfig implements WebMvcConfigurer {
 @Override
 public void addFormatters(FormatterRegistry registry) {
 registry.addConverter(new StringToIntegerConverter());
 registry.addConverter(new IntegerToStringConverter());
 registry.addConverter(new StringToIpPortConverter());
 registry.addConverter(new IpPortToStringConverter());
 }
}

스프링은 내부에서 ConversionService를 제공한다 우리는 WebMvcConfigurer가 
제공하는 addFormatters()를 사용해서 추가하고 싶은 컨버터를 등록하면 된다.
이렇게 하면 스프링은 내부에서 사용하는 ConversionService에 컨버터를 추가한다.


등록한 컨버터가 잘 동작하는지 확인해보자.

HelloController - 기존 코드
@GetMapping("/hello-v2")
public String helloV2(@RequestParam Integer data) {
 System.out.println("data = " + data);
 return "ok";
}

실행
http://localhost:8080/hello-v2?data=10
실행 로그
StringToIntegerConverter : convert source=10 data = 10
data=10 의 쿼리 파라미터는 문자이고 이것을 Integer data 로 변환하는 과정이 필요하다. 실행해보면 직접 등록한 StringToIntegerConverter 가 작동하는 로그를확인할 수 있다. 

그런데 생각해보면 StringToIntegerConverter 를 등록하기 전에도 이 코드는 잘 수행되었다. 그것은스프링이 내부에서 수 많은 기본 컨버터들을 제공하기 때문이다 컨버터를 추가하면 추가한 컨버터가 기본컨버터 보다 높은 우선순위를 가진다


이번에는 직접 정의한 타입인 IpPort를 사용해보자



@GetMapping("/ip-port")
public String ipPort(@RequestParam IpPort ipPort) {
 System.out.println("ipPort IP = " + ipPort.getIp());
 System.out.println("ipPort PORT = " + ipPort.getPort());
 return "ok";
}


[뷰 템플릿에 컨버터 적용하기]
타임리프는 렌더링 시에 컨버터를 적용해서 렌더링 하는 방법을 편리하게 지원한다.
이전까지는 문자를 객체로 변환했다면 이번에는 그 반대로 객체를 문자로 변환하는
작업을 확인할수가 있다.

ConverterController

@Controller
public class ConverterController {
 @GetMapping("/converter-view")
 public String converterView(Model model) {
 model.addAttribute("number", 10000);
 model.addAttribute("ipPort", new IpPort("127.0.0.1", 8080));
 return "converter-view";
 }


<ul>
 <li>${number}: <span th:text="${number}" ></span></li>
 <li>${{number}}: <span th:text="${{number}}" ></span></li>
 <li>${ipPort}: <span th:text="${ipPort}" ></span></li>
 <li>${{ipPort}}: <span th:text="${{ipPort}}" ></span></li>
</ul>


실행 결과
• ${number}: 10000
• ${{number}}: 10000
• ${ipPort}: hello.typeconverter.type.IpPort@59cb0946
• ${{ipPort}}: 127.0.0.1:8080

실행 결과 로그
IntegerToStringConverter : convert source=10000
IpPortToStringConverter : convert
source=hello.typeconverter.type.IpPort@59cb0946


${{number}}:뷰템플릿은 데이터를 문자로 출력한다. 따라서 컨버터를 적용하게 되면
Integer타입인 10000을 String타입으로 변환하는 컨버터인IntegerToStringConverter
을 실행하게 된다. 

${{ipPort}} : 뷰 템플릿은 데이터를 문자로 출력한다. 따라서 컨버터를 적용하게되면 IpPort 타입을 String 타입으로 변환해야 하므로 IpPortToStringConverter가적용된다. 그 결과 127.0.0.1:8080가 출력된다



@Controller
public class ConverterController {
 @GetMapping("/converter-view")
 public String converterView(Model model) {
 model.addAttribute("number", 10000);
 model.addAttribute("ipPort", new IpPort("127.0.0.1", 8080));
 return "converter-view";
 }
 
 
 @GetMapping("/converter/edit")
 public String converterForm(Model model) {
 IpPort ipPort = new IpPort("127.0.0.1", 8080);
 Form form = new Form(ipPort);
 model.addAttribute("form", form);
 return "converter-form";
 }
 
 @PostMapping("/converter/edit")
 public String converterEdit(@ModelAttribute Form form, Model model) {
 IpPort ipPort = form.getIpPort();
 model.addAttribute("ipPort", ipPort);
 return "converter-view";
 }
 
 
 @Data
 static class Form {
 private IpPort ipPort;
 public Form(IpPort ipPort) {
 this.ipPort = ipPort;
 }
 }
 
 
}
[포맷터] 문자특화

Converter는 입력과 출력타입에 제한이 없는 범용 타입 변환 기능을 제공한다.
이번에는 일반적인 웹 애플리케이션 환경을 생각해보자 불리언 타입을 숫자로 
바꾸는 것 같은 범용 기능보다 개발자 입장에서는 문자를 다른 타입으로 변환하거나
다른 타입을 문자로 변환하는 상황이 대부분이다. 앞서 살펴본 예제들을 떠올려 보면 문자를 다른 객체로 변환하거나 객체를 문자로 변환하는 일이 대부분이다



웹 애플리케이션에서 객체를 문자로, 문자를 객체로 변환하는 예

화면에 숫자를 출력해야 하는데, Integer String 출력 시점에
 숫자 1000 문자 "1,000" 이렇게
 
1000 단위에 쉼표를 넣어서 출력하거나, 또는 "1,000" 라는 문자를 1000 이라는 숫자로 변경해야 한다.

날짜 객체를 문자인 "2021-01-01 10:50:11" 와 같이 출력하거나 또는 그 반대의상황



[Locale]
여기에 추가로 날짜 숫자의 표현 방법은 Locale 현지화 정보가 사용될 수 있다.
이렇게 객체를 특정한 포멧에 맞추어 문자로 출력하거나 또는 그 반대의 역할을 하는 것에 특화된 기능이 바로 포맷터( Formatter )이다. 포맷터는 컨버터의 특별한 버전으로 이해하면 된다.

[포멧터 만들기]


public interface Printer<T> {
String print(T object, Locale locale);
}
public interface Parser<T> {
T parse(String text, Locale locale) throws ParseException;
}
public interface Formatter<T> extends Printer<T>, Parser<T> {
}

String print(T object, Locale locale) : 객체를 문자로 변경한다. 객체->문자
T parse(String text, Locale locale) : 문자를 객체로 변경한다. 문자->객체

@Slf4j
public class MyNumberFormatter implements Formatter<Number>{
	@Override
	public Number parse(String text,Locale locale)throws ParseException{
		log.info("text={},locale={}",text,locale);
		NumberFormat format=NumberFormat.getInstance(locale);
		return format.parse(text);
	}"1,000"->1000L 
	
	@Override
	public String print(Number object, Locale locale) {
	log.info("object={}, locale={}", object, locale);
	return NumberFormat.getInstance(locale).format(object);
 } 
 1000->"1,000"
	
}

class MyNumberFormatterTest {
 MyNumberFormatter formatter = new MyNumberFormatter();
 @Test
 void parse() throws ParseException {
 Number result = formatter.parse("1,000", Locale.KOREA);
 assertThat(result).isEqualTo(1000L); //Long 타입 주의
 }
 @Test
 void print() {
 String result = formatter.print(1000, Locale.KOREA);
 assertThat(result).isEqualTo("1,000");
 }
}

[포맷터를 지원하는 컨버전 서비스]
컨버전 서비스에서는 컨버터만 등록할수가 있고 포맷터를 등록할수는 없디.
그런데 생각해보면 포맷터는 객체->문자 문자->객체로 변환하는 특별한 컨버터일
뿐이다. 포맷터를 지원하는 컨버전 서비스를 사용하면 컨버전 서비스에 포맷터를
추가할수가 있다. 내부에서 어댑터 패턴을 사용해서 Formatter 가 Converter 처럼
동작하도록 지원한다.

@Test
 void formattingConversionService() {
 DefaultFormattingConversionService conversionService = new
DefaultFormattingConversionService();
 //컨버터 등록
 conversionService.addConverter(new StringToIpPortConverter());
 conversionService.addConverter(new IpPortToStringConverter());
 
 //포맷터 등록
 conversionService.addFormatter(new MyNumberFormatter());

[포맷터 적용하기]


Configuration
public class WebConfig implements WebMvcConfigurer {
 @Override
 public void addFormatters(FormatterRegistry registry) {
 	
 //주석처리 우선순위
 //registry.addConverter(new StringToIntegerConverter());
 //registry.addConverter(new IntegerToStringConverter());
 
 registry.addConverter(new StringToIpPortConverter());
 registry.addConverter(new IpPortToStringConverter());
 //추가
 registry.addFormatter(new MyNumberFormatter());
 }
}
주의 StringToIntegerConverter , IntegerToStringConverter를 꼭 주석처리하자
우선순위는 컨버터가 우선하므로 포맷터가 적용하지 않고 컨버터가 적용이된다.

[스프링이 제공하는 기본 포맷터]
스프링은 애노테이션 기반으로 원하는 형식을 지정해서 사용할 수 있는 매우 유용한
포맷터 두 가지를 제공한다.

@NumberFormat : 숫자 관련 형식 지정 포맷터 사용
@DateTimeFormat : 날짜 관련 형식 지정 포맷터 사용

@Controller
public class FormatterController {
 @GetMapping("/formatter/edit")
 public String formatterForm(Model model) {
 Form form = new Form();
 form.setNumber(10000);
 form.setLocalDateTime(LocalDateTime.now());
 model.addAttribute("form", form);
 return "formatter-form";
 }
 @PostMapping("/formatter/edit")
 public String formatterEdit(@ModelAttribute Form form) {
 return "formatter-view";
 }
 
 @Data
 static class Form {
 @NumberFormat(pattern = "###,###")
 private Integer number;
 @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
 private LocalDateTime localDateTime;
 }
}