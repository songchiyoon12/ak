[API예외처리 시작]

API예외 처리는 어떻게 해야할까?
HTML페이지의 경우 지금까지 설명했던 것 처럼 4XX 5XX같은 오류 페이지만 있으면
대부분의 문제를 해결할수 있다. 그런데  API의 경우 생각할것들이 많다. 
오류페이지는 단순히 고객에게 오류 화면을 보여주고 끝이지만 API는 각 오류상황에
맞는 오류 응답 스펙을 정하고 JSON으로 데이터를 내려주어야 한다.

@Component
public class WebServerCustomizer implements
WebServerFactoryCustomizer<ConfigurableWebServerFactory> {
 @Override
 public void customize(ConfigurableWebServerFactory factory) {
 ErrorPage errorPage404 = new ErrorPage(HttpStatus.NOT_FOUND, "/errorpage/404");
 ErrorPage errorPage500 = new
ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/error-page/500");
 ErrorPage errorPageEx = new ErrorPage(RuntimeException.class, "/errorpage/500");
 factory.addErrorPages(errorPage404, errorPage500, errorPageEx);
 }
}
다시 동작시킨다. 
이제WAS에 예외가 전달되거나 response.sendError()가 호출되면 위에 등록한 
예외 페이지 경로가 호출이된다.

@Slf4j
@RestController
public class ApiExceptionController{
	
	@GetMapping("/api/members/{id}")
	public MemberDto getMember(@PathVariable("id")String id){
		if(id.equals("ex")){
			throw new RuntimeException("잘못된 사용자");//500
		}
		
		return new MemberDto(id,"hello"+id);
	}
		@Data
		@AllArgsConstructor
		static class MemberDto {
		private String memberId;
		private String name;
 }
}
	
	
URL에 전달된 값이 ex이면 예외가 발생하도록 코드를 심어두었다.


정상 호출
http://localhost:8080/api/members/spring
{
 "memberId": "spring",
 "name": "hello spring"
}
	
	
예외 발생 호출
http://localhost:8080/api/members/ex
<!DOCTYPE HTML>
<html>
<head>
</head>
<body>
...
</body>	
	
API를 요청 했는데 정상의 경우 API로 JSON형식으로 데이터가 정상 반환된다.
그런데 오류가 발생하면 우리가 만든 미리 만들어준 오류 페이지 HTML이 반환된다.
이것은 우리가 기대하는 바가 아니다 클라이언트는 정상 요청이든 오류 요청이든
JSON이 반환되기를 바란다 웹 브라우저가 아닌 이상 HTML을 직접 받아서 할수 있는
것은 벼로없다 문제를 해결하려면 오류 페이지 컨트롤러도 JSON응답을 할수 있도록
수정을 해야한다.

@RequestMapping(value="/error-page/500",produces=MediaType
APPLICATION_JSON_VALUE)
public ResponseEntity<Map<String,Object>> errorPage500Api(HttpServletRequest
request,HttpServletResponse response){
	log.info("API errorPage 500");
	
	Map<String,Object> result=new HashMap<>();
	Exception ex=(Exception) request.getAttribute(ERROR_EXCEPTION);
	request.put("status",request.getAttribute(ERROR_STATUS_CODE));
	request.put("message",ex.getMessage());
	
	Integer statusCode = (Integer) request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
	
 return new ResponseEntity(result, HttpStatus.valueOf(statusCode));
}

[ResponseEntity란?]
차후 넣기

[API 예외 처리 - 스프링 부트 기본 오류 처리]
api예외 처리도 스프링 부트가 제공하는 기본 오류 방식을 사용할수있다.

앞서 학습했듯이 스프링 부트의 기본 설정은 오류 발생시 /error를 오류페이지로
요청한다 BasicErrorController는 이 경로를 기반으로 받는다.

	
{
 "timestamp": "2021-04-28T00:00:00.000+00:00",
 "status": 500,
 "error": "Internal Server Error",
 "exception": "java.lang.RuntimeException",
 "trace": "java.lang.RuntimeException: 잘못된 사용자\n\tat
hello.exception.web.api.ApiExceptionController.getMember(ApiExceptionController
.java:19...,
 "message": "잘못된 사용자",
 "path": "/api/members/ex"
}

html페이지 vs API오류
BasicErrorController를 확장하면 JSON메시지도 변경이 가능하다 그런데 API오류는
조금뒤에 설명한 @ExceptionHandler가 제공하는 기능을 사용하는 것이 더 나은 
방법이므로 지금은 BasicErrorController를 확장해서 JSON오류 메시지를 
변경할수 있다는 것만 이해하자. 


[API 예외처리 - HandlerExceptionResolver 시작]

예외가 발생해서 서블릿을 너머 was까지 예외가 전달되면 HTTP상태코드가 500으로
처리가 된다. 발생하는 예외에 따라서 400,404등등 다른 상태코드도 처리하고싶다
오류 메시지,형식등을 API마다 다르게 처리하고싶다.
	
상태코드 변환
예를 들어서 IllegalArgumentException 을 처리하지 못해서 컨트롤러 밖으로 넘어가는 일이 발생하면 HTTP 상태코드를 400으로 처리하고 싶다. 어떻게 해야할까
	
	
@GetMapping("/api/members/{id}")
public MemberDto getMember(@PathVariable("id") String id) {
	if (id.equals("ex")) {
	throw new RuntimeException("잘못된 사용자");
 }
	if (id.equals("bad")) {
	throw new IllegalArgumentException("잘못된 입력 값");//500
 }
	return new MemberDto(id, "hello " + id);
}
	
http://localhost:8080/api/members/bad라고 호출하면 IllegalArgumentException이
발생한다.

HandlerExceptionResolver
스프링 mvc는 컨트롤러 밖으로 예외가 던져진 경우 예외를 해결하고 동작을 새로 
정의 할수있는 방법을 제공한다 컨트롤러 밖으로 던져진 예외를 해결하고 동작 
방식을 변경하고 싶으면 HandlerExceptionResolver를 사용하면 된다. 
줄여서 ExceptionResolver이라고 한다.


@Slf4j
public class MyHandlerExceptionResolver implements HandlerExceptionResolver {
 @Override
public ModelAndView resolveException(HttpServletRequest request,
HttpServletResponse response, Object handler, Exception ex) {
	
 try {
 if (ex instanceof IllegalArgumentException) {
 	
 log.info("IllegalArgumentException resolver to 400");
 response.sendError(HttpServletResponse.SC_BAD_REQUEST,ex.getMessage());
 return new ModelAndView();
 
 }
 
 } catch (IOException e) {
 log.error("resolver ex", e);
 }
 
 return null;
 }
}

	
[API 예외처리 - HandlerExceptionResolver 활용]	

예외를 여기서 마무리하기
예외가 발생하면 WAS까지 예외가 던져지고 WAS에서 오류 페이지 정보를 다시 찾아서
/error를 호출하는 과정은 생각해보면 너무 복잡하다 ExceptionResolver를 활용
하면 예외가 발생했을떄 이런 복잡한 과정 없이 여기에서 문제를 깔끔하게
해결을 할수가있다.


	
	
	
	
	
	
	
	
	
	
	